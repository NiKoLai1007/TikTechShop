[{"C:\\trynaproject\\frontend\\src\\index.js":"1","C:\\trynaproject\\frontend\\src\\App.js":"2","C:\\trynaproject\\frontend\\src\\Components\\Home.js":"3","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Footer.js":"4","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Header.js":"5","C:\\trynaproject\\frontend\\src\\Components\\User\\Profile.js":"6","C:\\trynaproject\\frontend\\src\\Components\\User\\Register.js":"7","C:\\trynaproject\\frontend\\src\\Components\\User\\UpdateProfile.js":"8","C:\\trynaproject\\frontend\\src\\Components\\User\\Login.js":"9","C:\\trynaproject\\frontend\\src\\Components\\User\\ForgotPassword.js":"10","C:\\trynaproject\\frontend\\src\\Components\\Product\\ProductDetails.js":"11","C:\\trynaproject\\frontend\\src\\Components\\User\\UpdatePassword.js":"12","C:\\trynaproject\\frontend\\src\\Components\\User\\NewPassword.js":"13","C:\\trynaproject\\frontend\\src\\Components\\Cart\\ConfirmOrder.js":"14","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Payment.js":"15","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Cart.js":"16","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Shipping.js":"17","C:\\trynaproject\\frontend\\src\\Components\\Cart\\OrderSuccess.js":"18","C:\\trynaproject\\frontend\\src\\Components\\Order\\OrderDetails.js":"19","C:\\trynaproject\\frontend\\src\\Components\\Admin\\Dashboard.js":"20","C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewProduct.js":"21","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProcessOrder.js":"22","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateProduct.js":"23","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductsList.js":"24","C:\\trynaproject\\frontend\\src\\Components\\Order\\ListOrders.js":"25","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UsersList.js":"26","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateUser.js":"27","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateCategory.js":"28","C:\\trynaproject\\frontend\\src\\Components\\Admin\\CategoryList.js":"29","C:\\trynaproject\\frontend\\src\\Components\\Admin\\newCategory.js":"30","C:\\trynaproject\\frontend\\src\\Components\\Admin\\OrdersList.js":"31","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateBrand.js":"32","C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewBrand.js":"33","C:\\trynaproject\\frontend\\src\\Components\\Admin\\BrandList.js":"34","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductReviews.js":"35","C:\\trynaproject\\frontend\\src\\Components\\Route\\ProtectedRoute.js":"36","C:\\trynaproject\\frontend\\src\\Components\\Product\\Product.js":"37","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Metadata.js":"38","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Loader.js":"39","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Search.js":"40","C:\\trynaproject\\frontend\\src\\utils\\helpers.js":"41","C:\\trynaproject\\frontend\\src\\Components\\Cart\\CheckoutSteps.js":"42","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UserSalesChart.js":"43","C:\\trynaproject\\frontend\\src\\Components\\Admin\\SideBar.js":"44","C:\\trynaproject\\frontend\\src\\Components\\Admin\\MonthlySalesChart.js":"45","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductSalesChart.js":"46","C:\\trynaproject\\frontend\\src\\Components\\Review\\ListReviews.js":"47","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UserCharts.js":"48","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Toast.js":"49","C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewUser.js":"50"},{"size":281,"mtime":1701103415719,"results":"51","hashOfConfig":"52"},{"size":8175,"mtime":1701140380912,"results":"53","hashOfConfig":"52"},{"size":9418,"mtime":1701111374956,"results":"54","hashOfConfig":"52"},{"size":2461,"mtime":1701103415719,"results":"55","hashOfConfig":"52"},{"size":5410,"mtime":1701103415719,"results":"56","hashOfConfig":"52"},{"size":3583,"mtime":1701103415719,"results":"57","hashOfConfig":"52"},{"size":7067,"mtime":1701111374964,"results":"58","hashOfConfig":"52"},{"size":6296,"mtime":1701103415719,"results":"59","hashOfConfig":"52"},{"size":6685,"mtime":1701103415719,"results":"60","hashOfConfig":"52"},{"size":2640,"mtime":1701103415719,"results":"61","hashOfConfig":"52"},{"size":11131,"mtime":1701111374959,"results":"62","hashOfConfig":"52"},{"size":3511,"mtime":1701103415719,"results":"63","hashOfConfig":"52"},{"size":3501,"mtime":1701103415719,"results":"64","hashOfConfig":"52"},{"size":5186,"mtime":1701111374949,"results":"65","hashOfConfig":"52"},{"size":4555,"mtime":1701111374949,"results":"66","hashOfConfig":"52"},{"size":4631,"mtime":1701103415709,"results":"67","hashOfConfig":"52"},{"size":5214,"mtime":1701111374949,"results":"68","hashOfConfig":"52"},{"size":928,"mtime":1701103415709,"results":"69","hashOfConfig":"52"},{"size":6682,"mtime":1701103415719,"results":"70","hashOfConfig":"52"},{"size":13376,"mtime":1701111374934,"results":"71","hashOfConfig":"52"},{"size":8663,"mtime":1701111374939,"results":"72","hashOfConfig":"52"},{"size":7613,"mtime":1701103415709,"results":"73","hashOfConfig":"52"},{"size":10428,"mtime":1701103415709,"results":"74","hashOfConfig":"52"},{"size":6020,"mtime":1701103415709,"results":"75","hashOfConfig":"52"},{"size":3808,"mtime":1701103415719,"results":"76","hashOfConfig":"52"},{"size":4641,"mtime":1701135004627,"results":"77","hashOfConfig":"52"},{"size":5433,"mtime":1701103415709,"results":"78","hashOfConfig":"52"},{"size":6959,"mtime":1701139226335,"results":"79","hashOfConfig":"52"},{"size":4659,"mtime":1701103415702,"results":"80","hashOfConfig":"52"},{"size":5383,"mtime":1701103415709,"results":"81","hashOfConfig":"52"},{"size":5075,"mtime":1701103415709,"results":"82","hashOfConfig":"52"},{"size":6453,"mtime":1701111374944,"results":"83","hashOfConfig":"52"},{"size":5561,"mtime":1701103415702,"results":"84","hashOfConfig":"52"},{"size":4812,"mtime":1701103415702,"results":"85","hashOfConfig":"52"},{"size":6234,"mtime":1701103415709,"results":"86","hashOfConfig":"52"},{"size":834,"mtime":1701103415719,"results":"87","hashOfConfig":"52"},{"size":1122,"mtime":1701111374956,"results":"88","hashOfConfig":"52"},{"size":241,"mtime":1701103415719,"results":"89","hashOfConfig":"52"},{"size":141,"mtime":1701103415719,"results":"90","hashOfConfig":"52"},{"size":1163,"mtime":1701103415719,"results":"91","hashOfConfig":"52"},{"size":1376,"mtime":1701103415719,"results":"92","hashOfConfig":"52"},{"size":647,"mtime":1701111374944,"results":"93","hashOfConfig":"52"},{"size":1900,"mtime":1701103415709,"results":"94","hashOfConfig":"52"},{"size":3932,"mtime":1701103415709,"results":"95","hashOfConfig":"52"},{"size":1882,"mtime":1701103415702,"results":"96","hashOfConfig":"52"},{"size":3078,"mtime":1701111374939,"results":"97","hashOfConfig":"52"},{"size":757,"mtime":1701103415719,"results":"98","hashOfConfig":"52"},{"size":1473,"mtime":1701111374944,"results":"99","hashOfConfig":"52"},{"size":878,"mtime":1701103415719,"results":"100","hashOfConfig":"52"},{"size":7013,"mtime":1701135145019,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"1t76au3",{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"105"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"105"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"105"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"128","usedDeprecatedRules":"105"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"105"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"105"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"105"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"105"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"105"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"105"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"105"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"105"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"105"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"105"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"105"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"105"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"105"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"105"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"105"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"105"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"105"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"105"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"105"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"105"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"105"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"105"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"105"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"105"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"105"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"105"},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"105"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"105"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\trynaproject\\frontend\\src\\index.js",[],[],["287","288","289","290","291","292"],"C:\\trynaproject\\frontend\\src\\App.js",["293"],[],"C:\\trynaproject\\frontend\\src\\Components\\Home.js",["294","295","296","297","298"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\nimport MetaData from './Layout/Metadata'\r\nimport axios from 'axios';\r\n\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\nimport Product from './Product/Product';\r\nimport Loader from './Layout/Loader'\r\nimport Pagination from 'react-js-pagination'\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport Header from './Layout/Header';\r\n\r\n\r\n\r\nconst categories = [\r\n    'Womens',\r\n    'Mens',\r\n    'Kids',\r\n    'Sports',\r\n    'Smart',\r\n    'Home'\r\n]\r\nconst Home = () => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [products, setProducts] = useState([])\r\n    const [error, setError] = useState()\r\n    const [productsCount, setProductsCount] = useState(0)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [resPerPage, setResPerPage] = useState(0)\r\n    const [filteredProductsCount, setFilteredProductsCount] = useState(0)\r\n    const [price, setPrice] = useState([1, 1000]);\r\n    const [category, setCategory] = useState('');\r\n    let { keyword } = useParams();\r\n\r\n    const createSliderWithTooltip = Slider.createSliderWithTooltip;\r\n    const Range = createSliderWithTooltip(Slider.Range);\r\n\r\n    const getProducts = async (currentPage = 1, keyword = '', price) => {\r\n        let link = `http://localhost:4001/api/v1/products`\r\n\r\n        if (category) {\r\n            link = `http://localhost:4001/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price[1]}&price[gte]=${price[0]}`\r\n        }\r\n        console.log(link)\r\n        let res = await axios.get(link)\r\n        console.log(res)\r\n        setProducts(res.data.products)\r\n        setResPerPage(res.data.resPerPage)\r\n        setProductsCount(res.data.productsCount)\r\n        setFilteredProductsCount(res.data.filteredProductsCount)\r\n        setLoading(false)\r\n\r\n    }\r\n    let count = productsCount;\r\n\r\n    if (keyword) {\r\n        count = filteredProductsCount\r\n    }\r\n    function setCurrentPageNo(pageNumber) {\r\n        setCurrentPage(pageNumber)\r\n    }\r\n\r\n    const loadUser = async () => {\r\n        try {\r\n            \r\n            const { data } = await axios.get('/api/v1/me')\r\n    \r\n        } catch (error) {\r\n            console.log( error.response.data.message)\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProducts(currentPage, keyword, price, category)\r\n    }, [currentPage, keyword, price, category])\r\n   \r\n    return (\r\n        <>\r\n            {loading ? <Loader /> : (<Fragment>\r\n                <MetaData title={'Buy Best Products Online'} />\r\n                \r\n                <div className=\"container container-fluid\">\r\n                <section id=\"carousel\" className=\"mt-5\">\r\n                    <Carousel>\r\n                       \r\n                        <Carousel.Item>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src=\"/images/FinalS2.png\"\r\n                                alt=\"Second slide\"\r\n                                style={{ height: '400px' }}\r\n                            />\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src=\"/images/FinalS3.png\"\r\n                                alt=\"Third slide\"\r\n                                style={{ height: '400px' }}\r\n                            />\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src=\"/images/FinalS4.png\"\r\n                                alt=\"Fourth slide\"\r\n                                style={{ height: '400px' }}\r\n                            />\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src=\"/images/FinalS5.png\"\r\n                                alt=\"Fifth slide\"\r\n                                style={{ height: '400px' }}\r\n                            />\r\n                        </Carousel.Item>\r\n                        <Carousel.Item>\r\n                            <img\r\n                                className=\"d-block w-100\"\r\n                                src=\"/images/FinalS1.png\"\r\n                                alt=\"First slide\"\r\n                                style={{ height: '400px' }}\r\n                            />\r\n                        </Carousel.Item>\r\n                    </Carousel>\r\n                </section>\r\n                    <h1 id=\"products_heading\">Latest Products</h1>\r\n\r\n                    <section id=\"products\" className=\"container mt-5\">\r\n\r\n                        <div className=\"row\">\r\n                            {keyword ? (\r\n                                <Fragment>\r\n                                    <div className=\"col-6 col-md-3 mt-5 mb-5\">\r\n                                        <div className=\"px-5\">\r\n                                            <Range\r\n                                                marks={{\r\n                                                    1: `$1`,\r\n                                                    1000: `$1000`\r\n                                                }}\r\n                                                min={1}\r\n                                                max={1000}\r\n                                                defaultValue={[1, 1000]}\r\n                                                tipFormatter={value => `$${value}`}\r\n                                                tipProps={{\r\n                                                    placement: \"top\",\r\n                                                    visible: true\r\n                                                }}\r\n                                                value={price}\r\n                                                onChange={price => setPrice(price)}\r\n                                            />\r\n                                            <hr className=\"my-5\" />\r\n                                            <div className=\"mt-5\">\r\n                                                <h4 className=\"mb-3\">\r\n                                                    Categories\r\n                                                </h4>\r\n                                                <ul className=\"pl-0\">\r\n                                                    {categories.map(category => (\r\n                                                        <li\r\n                                                            style={{\r\n                                                                cursor: 'pointer',\r\n                                                                listStyleType: 'none'\r\n                                                            }}\r\n                                                            key={category}\r\n                                                            onClick={() => setCategory(category)}\r\n                                                        >\r\n                                                            {category}\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-6 col-md-9\">\r\n                                        <div className=\"row\">\r\n                                            {products.map(product => (\r\n                                                <Product key={product._id} product={product} col={4} />\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </Fragment>\r\n                            ) : (\r\n                                products.map(product => (\r\n                                    <Product key={product._id} product={product} col={3} />\r\n                                ))\r\n                            )}\r\n\r\n                        </div>\r\n                    </section>\r\n                    {resPerPage <= count && (\r\n                        <div className=\"d-flex justify-content-center mt-5\">\r\n                            <Pagination\r\n                                activePage={currentPage}\r\n                                itemsCountPerPage={resPerPage}\r\n                                totalItemsCount={productsCount}\r\n                                onChange={setCurrentPageNo}\r\n                                nextPageText={'Next'}\r\n                                prevPageText={'Prev'}\r\n                                firstPageText={'First'}\r\n                                lastPageText={'Last'}\r\n                                itemClass=\"page-item\"\r\n                                linkClass=\"page-link\"\r\n                            />\r\n                        </div>)}\r\n                </div>\r\n            </Fragment>\r\n            )}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Home","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Footer.js",["299","300","301","302","303","304"],[],"import React, { Fragment } from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Fragment>\r\n            <footer className=\"py-1\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4\">\r\n                            <h4>Contact Us</h4>\r\n                            <p>\r\n                                <strong>Tich Tech</strong><br />\r\n                                123 Time Square, Cityville<br />\r\n                                Watchland, WZ 54321<br />\r\n                                <i className=\"fa fa-phone\"></i> +1 (555) 123-4567\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-4\">\r\n                            <h4>Quick Links</h4>\r\n                            <ul className=\"list-unstyled\" >\r\n                                <li><a href=\"#\">Home</a></li>\r\n                                <li><a href=\"#\">About Us</a></li>\r\n                                <li><a href=\"#\">Contact Us</a></li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-4\">\r\n                            <h4>Stay Connected</h4>\r\n                            <p>Follow us on social media for the latest updates and promotions.</p>\r\n                            <ul className=\"list-inline\">\r\n                                <li><a href=\"#\" target=\"_blank\"><i className=\"fa fa-facebook\"></i></a></li>\r\n                                <li><a href=\"#\" target=\"_blank\"><i className=\"fa fa-twitter\"></i></a></li>\r\n                                <li><a href=\"#\" target=\"_blank\"><i className=\"fa fa-instagram\"></i></a></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bottom-footer\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                                <p className=\"text-center\">\r\n                                    &copy; 2023 Tick Tech . All rights reserved. | Designed by BSIT-NS-3A-T \r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Header.js",["305","306","307","308","309"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport '../../App.css'\r\nimport Search from './Search'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { getUser, logout } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { FaShoppingCart } from 'react-icons/fa'; \r\n\r\nconst Header = ({ cartItems }) => {\r\n\r\n    const [user, setUser] = useState('')\r\n    const navigate = useNavigate()\r\n    const logoutUser = async () => {\r\n\r\n        try {\r\n            await axios.get(`http://localhost:4001/api/v1/logout`)\r\n\r\n            setUser('')\r\n\r\n            logout(() => navigate('/'))\r\n        } catch (error) {\r\n            toast.error(error.response.data.message)\r\n\r\n        }\r\n    }\r\n    const logoutHandler = () => {\r\n        logoutUser();\r\n        toast.success('log out', {\r\n            position: toast.POSITION.BOTTOM_RIGHT\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        setUser(getUser())\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container-fluidnav\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                             \r\n                        <div className=\"col-12 text-right\"> \r\n                        \r\n                            <a className=\"ml-4 mr-2 text-white\">Follow us on</a>\r\n                            <a href=\"#\" target=\"_blank\" className=\"mr-2\"><i className=\"fa fa-facebook\"></i></a>\r\n                            <a href=\"#\" target=\"_blank\" className=\"mr-2\"><i className=\"fa fa-twitter\"></i></a>\r\n                            <a href=\"#\" target=\"_blank\" className=\"mr-2\"><i className=\"fa fa-instagram\"></i></a>\r\n\r\n                            {user ? (<div className=\"ml-4 dropdown d-inline\">\r\n\r\n                            \r\n\r\n                                <Link to=\"#!\" className=\"btn dropdown-toggle text-white mr-4\" type=\"button\" id=\"dropDownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                    <figure className=\"avatar avatar-nav\">\r\n                                        <img\r\n                                            src={user.avatar && user.avatar.url}\r\n                                            alt={user && user.name}\r\n                                            className=\"rounded-circle\"\r\n                                        />\r\n                                    </figure>\r\n                                    <span>{user && user.name}</span>\r\n                                </Link>\r\n\r\n                                <div className=\"dropdown-menu\" aria-labelledby=\"dropDownMenuButton\">\r\n                                    {user && user.role === 'admin' && (\r\n                                        <Link className=\"dropdown-item\" to=\"/dashboard\">Dashboard</Link>\r\n                                    )}\r\n                                    <Link className=\"dropdown-item\" to=\"/orders/me\">Orders</Link>\r\n                                    <Link className=\"dropdown-item\" to=\"/me\">Profile</Link>\r\n\r\n                                    <Link\r\n                                        className=\"dropdown-item text-danger\" to=\"/\" onClick={logoutHandler}\r\n                                    >\r\n                                        Logout\r\n                                    </Link>\r\n                                </div>\r\n                                \r\n                                \r\n                                </div>) : (\r\n                                            \r\n                                            <div>\r\n                                                <Link to=\"/login\" className=\"btn ml-1\" id=\"login_btn\">Login</Link> <a style={{ color: 'white' }}>|</a>\r\n                                                <Link to=\"/register\" className=\"btn ml-1\" id=\"signup_btn\"> Sign Up</Link>\r\n                                            </div>\r\n                                            )}\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <nav className=\"navbar row justify-content-center\">\r\n            \r\n                <Link to=\"/\" style={{ textDecoration: 'none' }} >\r\n                    <div className=\"col-12 col-md-1\">\r\n                        <div className=\"navbar-brand\">\r\n                            <img src=\"./images/shopit_logo.png\" alt=\"Shopit Logo\" width=\"200\" height=\"60\"/>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n                <div className=\"col-12 col-md-8 mt-2 mt-md-0 \">\r\n                    <Search />\r\n                </div>\r\n                <div className=\"col-12 col-md-1 text-left \">\r\n                    <Link to=\"/cart\" style={{ textDecoration: 'none' }} className=\"cart-container\">\r\n                        <span id=\"cart\" className=\"ml-4\">\r\n                            <FaShoppingCart />\r\n                        </span>\r\n                        {cartItems.length > 0 && (\r\n                            <span className=\"ml-1\" id=\"cart_count\">\r\n                            {cartItems.length}\r\n                            </span>\r\n                        )}\r\n                    </Link>\r\n                </div>\r\n            </nav>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Header","C:\\trynaproject\\frontend\\src\\Components\\User\\Profile.js",["310","311"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Loader from '../Layout/Loader'\r\nimport MetaData from '../Layout/Metadata'\r\nimport { getUser, } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getToken } from '../../utils/helpers';\r\n\r\nconst Profile = () => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [user, setUser] = useState('')\r\n    \r\n\r\n    const getProfile = async () => {\r\n        const config = {\r\n            headers: {\r\n                // 'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${getToken()}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/me`, config)\r\n            console.log(data)\r\n            setUser(data.user)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n            toast.error(\"invalid user or password\", {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            })\r\n        }\r\n\r\n    }\r\n    // const getUserToken = async () => {\r\n    //     const userToken = getToken()\r\n    //     console.log(userToken)\r\n    //     setToken(userToken)\r\n    // }\r\n    useEffect(() => {\r\n        // getUserToken()\r\n        getProfile()\r\n\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            {loading ? <Loader /> : (\r\n                <Fragment>\r\n                    <MetaData title={'Your Profile'} />\r\n\r\n                    <div className='card text-white'>\r\n    <img\r\n        src=\"/images/profiletop2.png\"\r\n        alt=\"Image\"\r\n        className=\"img-fluid\"\r\n    />\r\n    \r\n    <div className=\"avatar-container\">\r\n        <figure className='avatar avatar-profile'>\r\n            <img\r\n                className=\"rounded-circle img-fluid\"\r\n                src={user.avatar.url}\r\n                alt={user.name}\r\n            />\r\n          \r\n        </figure>\r\n        \r\n        <h1 className='prof'> My Profile</h1>\r\n       \r\n    </div>\r\n</div>\r\n\r\n                \r\n\r\n                    \r\n                    <div className=\"row justify-content-around mt-5 user-info\">\r\n                        <div className=\"col-12 col-md-3 \">\r\n                            \r\n                            <Link to=\"/me/update\" id=\"edit_profile\" className=\"btn btn-primary btn-block my-5\">\r\n                                Edit Profile\r\n                            </Link>\r\n                            <Link to=\"/password/update\" className=\"btn btn-primary btn-block mt-3\">\r\n                                Change Password\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-4\">\r\n                            <h4>Full Name</h4>\r\n                            <p>{user.name}</p>\r\n\r\n                            <h4>Email Address</h4>\r\n                            <p>{user.email}</p>\r\n\r\n                            <h4>Joined On</h4>\r\n                            <p>{String(user.createdAt).substring(0, 10)}</p>\r\n\r\n                            {user.role !== 'admin' && (\r\n                                <Link to=\"/orders/me\" className=\"btn btn-danger btn-block mt-5\">\r\n                                    My Orders\r\n                                </Link>\r\n                            )}\r\n\r\n                           \r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Profile","C:\\trynaproject\\frontend\\src\\Components\\User\\Register.js",["312","313","314","315"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Metadata from '../Layout/Metadata'\r\nimport axios from 'axios'\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const [user, setUser] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    const { name, email, password } = user;\r\n\r\n    const [avatar, setAvatar] = useState('')\r\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n   \r\n\r\n    let navigate = useNavigate()\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            navigate('/')\r\n        }\r\n        if (error) {\r\n            console.log(error)\r\n           setError()\r\n        }\r\n\r\n    }, [error. isAuthenticated, navigate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const formData = new FormData();\r\n        formData.set('name', name);\r\n        formData.set('email', email);\r\n        formData.set('password', password);\r\n        formData.set('avatar', avatar);\r\n\r\n        register(formData)\r\n    }\r\n\r\n    const onChange = e => {\r\n        if (e.target.name === 'avatar') {\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = () => {\r\n                if (reader.readyState === 2) {\r\n                    setAvatarPreview(reader.result)\r\n                    setAvatar(reader.result)\r\n                }\r\n            }\r\n\r\n            reader.readAsDataURL(e.target.files[0])\r\n\r\n        } else {\r\n            setUser({ ...user, [e.target.name]: e.target.value })\r\n        }\r\n    }\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.post(`http://localhost:4001/api/v1/register`, userData, config)\r\n            console.log(data.user)\r\n            setIsAuthenticated(true)\r\n            setLoading(false)\r\n            setUser(data.user)\r\n            navigate('/')\r\n\r\n        } catch (error) {\r\n            setIsAuthenticated(false)\r\n            setLoading(false)\r\n            setUser(null)\r\n            setError(error.response.data.message)\r\n            console.log(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handlerOnClick = async (provider) => {\r\n        try {\r\n          const res = await axios.socialMediaAuth(provider);\r\n          console.log(res);\r\n        } catch (error) {\r\n          console.error('Error during social media authentication:', error);\r\n        }\r\n      };\r\n      \r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <Metadata title={'Register User'} />\r\n\r\n            <div className=\"row wrapper justify-content-center\">\r\n            <div className=\"col-12 col-md-5\">\r\n                    <img\r\n                        src=\"images/loginpic2.png\"\r\n                        alt=\"Your Image\"\r\n                        className=\"img-fluid\"\r\n                        style={{ height: '450px' }}\r\n                    />\r\n            </div>\r\n                <div className=\"col-10 col-lg-5\">\r\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\r\n                        <h1 className=\"mb-3\">Register</h1>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email_field\">Name</label>\r\n                            <input\r\n                                type=\"name\"\r\n                                id=\"name_field\"\r\n                                className=\"form-control\"\r\n                                name='name'\r\n                                value={name}\r\n                                onChange={onChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email_field\">Email</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                id=\"email_field\"\r\n                                className=\"form-control\"\r\n                                name='email'\r\n                                value={email}\r\n                                onChange={onChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_field\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password_field\"\r\n                                className=\"form-control\"\r\n                                name='password'\r\n                                value={password}\r\n                                onChange={onChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className='form-group'>\r\n                            <label htmlFor='avatar_upload'>Avatar</label>\r\n                            <div className='d-flex align-items-center'>\r\n                                <div>\r\n                                    <figure className='avatar mr-3 item-rtl'>\r\n                                        <img\r\n                                            src={avatarPreview}\r\n                                            className='rounded-circle'\r\n                                            alt='Avatar Preview'\r\n                                        />\r\n                                    </figure>\r\n                                </div>\r\n                                <div className='custom-file'>\r\n                                    <input\r\n                                        type='file'\r\n                                        name='avatar'\r\n                                        className='custom-file-input'\r\n                                        id='customFile'\r\n                                        accept=\"images/*\"\r\n                                        onChange={onChange}\r\n                                    />\r\n                                    <label className='custom-file-label' htmlFor='customFile'>\r\n                                        Choose Avatar\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button\r\n                            id=\"register_button\"\r\n                            type=\"submit\"\r\n                            className=\"btn btn-block py-3\"\r\n                            // disabled={loading ? false : true}\r\n                        >\r\n                            REGISTER\r\n                        </button>\r\n                    </form>\r\n\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\trynaproject\\frontend\\src\\Components\\User\\UpdateProfile.js",["316","317","318","319"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport MetaData from '../Layout/Metadata'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getToken } from '../../utils/helpers';\r\n\r\nconst UpdateProfile = () => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [avatar, setAvatar] = useState('')\r\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\r\n    const [error, setError] = useState('')\r\n    const [user, setUser] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [isUpdated, setIsUpdated] = useState(false)\r\n    let navigate = useNavigate();\r\n\r\n    const getProfile = async () => {\r\n        const config = {\r\n            headers: {\r\n                // 'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${getToken()}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/me`, config)\r\n            console.log(data)\r\n            // setUser(data.user)\r\n            setName(data.user.name);\r\n            setEmail(data.user.email);\r\n            setAvatarPreview(data.user.avatar.url)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            toast.error('user not found', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    const updateProfile = async (userData) => {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                'Authorization': `Bearer ${getToken()}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/me/update`, userData, config)\r\n            setIsUpdated(data.success)\r\n            setLoading(false)\r\n            toast.success('user updated', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n            //  getProfile();\r\n            navigate('/me', { replace: true })\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n            toast.error('user not found', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n        }\r\n    }\r\n\r\n    // console.log(error)\r\n    useEffect(() => {\r\n        getProfile()\r\n\r\n    }, [])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.set('name', name);\r\n        formData.set('email', email);\r\n        formData.set('avatar', avatar);\r\n        updateProfile(formData)\r\n    }\r\n\r\n    const onChange = e => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = () => {\r\n            if (reader.readyState === 2) {\r\n                setAvatarPreview(reader.result)\r\n                setAvatar(reader.result)\r\n            }\r\n        }\r\n\r\n        reader.readAsDataURL(e.target.files[0])\r\n\r\n    }\r\n    console.log(user)\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Update Profile'} />\r\n\r\n            <div className=\"row wrapper\">\r\n                <div className=\"col-10 col-lg-5\">\r\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\r\n                        <h1 className=\"mt-2 mb-5\">Update Profile</h1>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email_field\">Name</label>\r\n                            <input\r\n                                type=\"name\"\r\n                                id=\"name_field\"\r\n                                className=\"form-control\"\r\n                                name='name'\r\n                                value={name}\r\n                                onChange={(e) => setName(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email_field\">Email</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                id=\"email_field\"\r\n                                className=\"form-control\"\r\n                                name='email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className='form-group'>\r\n                            <label htmlFor='avatar_upload'>Avatar</label>\r\n                            <div className='d-flex align-items-center'>\r\n                                <div>\r\n                                    <figure className='avatar mr-3 item-rtl'>\r\n                                        <img\r\n                                            src={avatarPreview}\r\n                                            className='rounded-circle'\r\n                                            alt='Avatar Preview'\r\n                                        />\r\n                                    </figure>\r\n                                </div>\r\n                                <div className='custom-file'>\r\n                                    <input\r\n                                        type='file'\r\n                                        name='avatar'\r\n                                        className='custom-file-input'\r\n                                        id='customFile'\r\n                                        accept='image/*'\r\n                                        onChange={onChange}\r\n                                    />\r\n                                    <label className='custom-file-label' htmlFor='customFile'>\r\n                                        Choose Avatar\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\" disabled={loading ? true : false} >Update</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile","C:\\trynaproject\\frontend\\src\\Components\\User\\Login.js",["320","321","322","323"],[],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport Loader from '../Layout/Loader';\r\nimport Metadata from '../Layout/Metadata';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios';\r\nimport { authenticate } from '../../utils/helpers';\r\nimport { getUser } from '../../utils/helpers';\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [emailError, setEmailError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n    let location = useLocation();\r\n    const redirect = location.search ? new URLSearchParams(location.search).get('redirect') : '';\r\n    const notify = (error) =>\r\n        toast.error(error, {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            };\r\n\r\n            // Add email validation\r\n            if (!email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n                setEmailError('Invalid email');\r\n                return;\r\n            } else {\r\n                setEmailError('');\r\n            }\r\n\r\n            // Add password validation\r\n            if (!password) {\r\n                setPasswordError('Password is required');\r\n                return;\r\n            } else {\r\n                setPasswordError('');\r\n            }\r\n\r\n            const { data } = await axios.post(`http://localhost:4001/api/v1/login`, { email, password }, config);\r\n            console.log(data);\r\n            authenticate(data, () => navigate('/'));\r\n        } catch (error) {\r\n            toast.error('Invalid user or password', {\r\n                position: toast.POSITION.BOTTOM_RIGHT,\r\n            });\r\n        }\r\n    };\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Add email and password validation\r\n        if (!email) {\r\n            setEmailError('Email is required');\r\n        } else if (!email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\r\n            setEmailError('Invalid email');\r\n        } else {\r\n            setEmailError('');\r\n        }\r\n\r\n        if (!password) {\r\n            setPasswordError('Password is required');\r\n        } else {\r\n            setPasswordError('');\r\n        }\r\n\r\n        // If either email or password is blank, return without attempting login\r\n        if (!email || !password) {\r\n            return;\r\n        }\r\n\r\n        login(email, password);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (getUser() && redirect === 'shipping') {\r\n            navigate(`/${redirect}`);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading ? (\r\n                <Loader />\r\n            ) : (\r\n                <Fragment>\r\n                    <Metadata title={'Login'} />\r\n\r\n                    <div className=\"login row wrapper justify-content-center\">\r\n                        <div className=\"col-12 col-md-5\">\r\n                            <img\r\n                                src=\"images/loginpic2.png\"\r\n                                alt=\"Your Image\"\r\n                                className=\"img-fluid\"\r\n                                style={{ height: '450px' }}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-4 \">\r\n                            <form\r\n                                className=\"hey\"\r\n                                onSubmit={submitHandler}\r\n                                style={{ borderRadius: '30px' }}\r\n                            >\r\n                                <h1 className=\"mb-3 font-weight-bold\">Login</h1>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email_field\">Email</label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        id=\"email_field\"\r\n                                        className={`form-control ${emailError ? 'is-invalid' : ''}`}\r\n                                        value={email}\r\n                                        onChange={(e) => {\r\n                                            setEmail(e.target.value);\r\n                                            setEmailError('');\r\n                                        }}\r\n                                    />\r\n                                    {emailError && <div className=\"invalid-feedback\">{emailError}</div>}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password_field\">Password</label>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        id=\"password_field\"\r\n                                        className={`form-control ${passwordError ? 'is-invalid' : ''}`}\r\n                                        value={password}\r\n                                        onChange={(e) => {\r\n                                            setPassword(e.target.value);\r\n                                            setPasswordError('');\r\n                                        }}\r\n                                    />\r\n                                    {passwordError && <div className=\"invalid-feedback\">{passwordError}</div>}\r\n                                </div>\r\n\r\n                                <Link to=\"/password/forgot\" className=\"float-right mb-4\">\r\n                                    Forgot Password?\r\n                                </Link>\r\n\r\n                                <button\r\n                                    id=\"login_button\"\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-block py-3\"\r\n                                >\r\n                                    LOGIN\r\n                                </button>\r\n\r\n                                <Link to=\"/register\" className=\"float-right mt-3\">\r\n                                    New User?\r\n                                </Link>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","C:\\trynaproject\\frontend\\src\\Components\\User\\ForgotPassword.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Product\\ProductDetails.js",["324"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { Carousel } from 'react-bootstrap'\r\n\r\nimport Loader from '../Layout/Loader'\r\nimport MetaData from '../Layout/Metadata'\r\nimport { getUser, getToken, successMsg, errMsg } from '../../utils/helpers'\r\nimport ListReviews from '../Review/ListReviews'\r\n// import { useAlert} from '@blaumaus/react-alert'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst ProductDetails = ({ addItemToCart, cartItems }) => {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [product, setProduct] = useState({})\r\n    const [error, setError] = useState('')\r\n    const [quantity, setQuantity] = useState(0)\r\n    const [user, setUser] = useState(getUser())\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n    const [errorReview, setErrorReview] = useState('');\r\n    const [success, setSuccess] = useState('')\r\n\r\n\r\n    let { id } = useParams()\r\n    // const alert = useAlert();\r\n\r\n    const productDetails = async (id) => {\r\n        let link = `http://localhost:4001/api/v1/product/${id}`\r\n        console.log(link)\r\n        let res = await axios.get(link)\r\n        console.log(res)\r\n        if (!res)\r\n            setError('Product not found')\r\n        setProduct(res.data.product)\r\n        setLoading(false)\r\n    }\r\n\r\n    const increaseQty = () => {\r\n        const count = document.querySelector('.count')\r\n        if (count.valueAsNumber >= product.stock) return;\r\n        const qty = count.valueAsNumber + 1;\r\n        setQuantity(qty)\r\n    }\r\n\r\n    const decreaseQty = () => {\r\n        const count = document.querySelector('.count')\r\n        if (count.valueAsNumber <= 1) return;\r\n        const qty = count.valueAsNumber - 1;\r\n        setQuantity(qty)\r\n    }\r\n    const addToCart = async () => {\r\n        await addItemToCart(id, quantity);\r\n    }\r\n    function setUserRatings() {\r\n        const stars = document.querySelectorAll('.star');\r\n        stars.forEach((star, index) => {\r\n            star.starValue = index + 1;\r\n            ['click', 'mouseover', 'mouseout'].forEach(function (e) {\r\n                star.addEventListener(e, showRatings);\r\n            })\r\n        })\r\n        function showRatings(e) {\r\n            stars.forEach((star, index) => {\r\n                if (e.type === 'click') {\r\n                    if (index < this.starValue) {\r\n                        star.classList.add('orange');\r\n                        setRating(this.starValue)\r\n                    } else {\r\n                        star.classList.remove('orange')\r\n                    }\r\n                }\r\n                if (e.type === 'mouseover') {\r\n                    if (index < this.starValue) {\r\n                        star.classList.add('yellow');\r\n                    } else {\r\n                        star.classList.remove('yellow')\r\n                    }\r\n                }\r\n                if (e.type === 'mouseout') {\r\n                    star.classList.remove('yellow')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const newReview = async (reviewData) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/review`, reviewData, config)\r\n            setSuccess(data.success)\r\n\r\n        } catch (error) {\r\n            setErrorReview(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        navigate('/login?redirect=shipping')\r\n    }\r\n\r\n    const reviewHandler = () => {\r\n        const formData = new FormData();\r\n        formData.set('rating', rating);\r\n        formData.set('comment', comment);\r\n        formData.set('productId', id);\r\n        newReview(formData)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        productDetails(id)\r\n        if (errorReview) {\r\n            errMsg(errorReview)\r\n            setErrorReview('')\r\n        }\r\n        if (success) {\r\n            successMsg('Review posted successfully')\r\n            setSuccess(false)\r\n\r\n        }\r\n    }, [id, error, errorReview, success]);\r\n\r\n    localStorage.setItem('cartItems', JSON.stringify(cartItems))\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading ? <Loader /> : (\r\n                <Fragment>\r\n                    <MetaData title={product.name} />\r\n                    <div className=\"row d-flex justify-content-around\">\r\n                        <div className=\"col-12 col-lg-5 img-fluid\" id=\"product_image\">\r\n                            <Carousel pause='hover'>\r\n                                {product.images && product.images.map(image => (\r\n                                    <Carousel.Item key={image.public_id}>\r\n                                        <img className=\"d-block w-100\" src={image.url} alt={product.title} />\r\n                                    </Carousel.Item>\r\n                                ))}\r\n                            </Carousel>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-lg-5 mt-5\">\r\n                                    \r\n                            <br /> <br />\r\n                           <br/>\r\n                            <h1>{product.name}</h1>\r\n                            <p id=\"product_id\">Product # {product._id}</p>\r\n\r\n                           \r\n                            <br /> <br /> <br />\r\n                            <div className=\"rating-outer\">\r\n                                <div className=\"rating-inner\" style={{ width: `${(product.ratings / 5) * 100}%` }}></div>\r\n                            </div>\r\n                            <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\r\n                            <p>Status: <span id=\"stock_status\" className={product.stock > 0 ? 'greenColor' : 'redColor'} >{product.stock > 0 ? 'In Stock' : 'Out of Stock'}</span></p>\r\n                            <hr />\r\n\r\n                            <p id=\"product_price\">${product.price}</p>\r\n                           \r\n\r\n                            <hr /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            \r\n                            <div className=\"stockCounter d-inline\"> Quantity &nbsp;&nbsp;\r\n                                <span className=\"btn btn-danger minus\" onClick={decreaseQty} >-</span>\r\n\r\n                                <input type=\"number\" className=\"form-control count d-inline\" value={quantity} readOnly />\r\n                                {/* <span className=\"btn btn-primary plus\"> +</span> */}\r\n                                <span className=\"btn btn-primary plus\" onClick={increaseQty}>+</span>\r\n                            </div>\r\n                            \r\n                           \r\n                            <button type=\"button\" id=\"cart_btn\" className=\"btn btn-primary d-inline ml-4\" disabled={product.stock === 0} onClick={addToCart}>Add to Cart</button>\r\n                        </div>\r\n                        <div className=\"col-12 col-lg-10 mt-5\">\r\n                        <hr />\r\n                        <h4 className=\"mt-2\">Description:</h4>\r\n                            <p>{product.description}</p>\r\n                            <hr />\r\n                            <p id=\"product_seller mb-3\">Sold by: <strong>{product.seller}</strong></p>\r\n\r\n                            {user ? <button id=\"review_btn\" type=\"button\" className=\"btn btn-primary mt-4\" data-toggle=\"modal\" data-target=\"#ratingModal\" onClick={setUserRatings} >\r\n                                Submit Your Review\r\n                            </button> :\r\n                                <div className=\"alert alert-danger mt-5\" type='alert'>Login to post your review.</div>}\r\n                            <div className=\"row mt-2 mb-5\">\r\n                                <div className=\"rating w-50\">\r\n\r\n                                    <div className=\"modal fade\" id=\"ratingModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"ratingModalLabel\" aria-hidden=\"true\">\r\n                                        <div className=\"modal-dialog\" role=\"document\">\r\n                                            <div className=\"modal-content\">\r\n                                                <div className=\"modal-header\">\r\n                                                    <h5 className=\"modal-title\" id=\"ratingModalLabel\">Submit Review</h5>\r\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                                        <span aria-hidden=\"true\">&times;</span>\r\n                                                    </button>\r\n                                                </div>\r\n                                                <div className=\"modal-body\">\r\n\r\n                                                    <ul className=\"stars\" >\r\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\r\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\r\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\r\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\r\n                                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\r\n                                                    </ul>\r\n\r\n                                                    <textarea\r\n                                                        name=\"review\"\r\n                                                        id=\"review\" className=\"form-control mt-3\"\r\n                                                        value={comment}\r\n                                                        onChange={(e) => setComment(e.target.value)}\r\n                                                    >\r\n                                                    </textarea>\r\n\r\n                                                    <button className=\"btn my-3 float-right review-btn px-4 text-white\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={reviewHandler}>Submit</button>\r\n                                                \r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                   \r\n                                    {product.reviews && product.reviews.length > 0 && (\r\n\r\n<ListReviews reviews={product.reviews} />\r\n\r\n)}\r\n                                </div>\r\n                              \r\n                            </div>\r\n                           \r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    )\r\n\r\n}\r\nexport default ProductDetails","C:\\trynaproject\\frontend\\src\\Components\\User\\UpdatePassword.js",["325"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MetaData from '../Layout/Metadata';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios';\r\nimport { getToken } from '../../utils/helpers';\r\n\r\nconst UpdatePassword = () => {\r\n\r\n    const [oldPassword, setOldPassword] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n    const [isUpdated, setIsUpdated] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    let navigate = useNavigate();\r\n    const updatePassword = async (formData) => {\r\n        console.log(formData)\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const {data } = await axios.put(`http://localhost:4001/api/v1/password/update`, formData, config)\r\n            setIsUpdated(data.success)\r\n            setLoading(false)\r\n            toast.success('password updated', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n            navigate('/me')\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (error) {\r\n            toast.error(error, {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n        }\r\n    }, [error, ])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.set('oldPassword', oldPassword);\r\n        formData.set('password', password);\r\n        updatePassword(formData)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Change Password'} />\r\n\r\n            <div className=\"row wrapper\">\r\n                <div className=\"col-10 col-lg-5\">\r\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} >\r\n                        <h1 className=\"mt-2 mb-5\">Update Password</h1>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"old_password_field\">Old Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"old_password_field\"\r\n                                className=\"form-control\"\r\n                                value={oldPassword}\r\n                                onChange={(e) => setOldPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"new_password_field\">New Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"new_password_field\"\r\n                                className=\"form-control\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\" disabled={loading ? true : false} >Update Password</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdatePassword","C:\\trynaproject\\frontend\\src\\Components\\User\\NewPassword.js",["326"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport MetaData from '../Layout/Metadata'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios';\r\n\r\nconst NewPassword = () => {\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n\r\n    let navigate = useNavigate();\r\n    const [error, setError] = useState('')\r\n    const [success, setSuccess] = useState('')\r\n\r\n    let { token } = useParams();\r\n\r\n    const resetPassword = async (token, passwords) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/password/reset/${token}`, passwords, config)\r\n            setSuccess(data.success)\r\n        } catch (error) {\r\n            setError(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (error) {\r\n            toast.error(error, {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n        }\r\n        if (success) {\r\n            toast.success('password updated', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n            navigate('/login')\r\n        }\r\n\r\n    }, [error, success,])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.set('password', password);\r\n        formData.set('confirmPassword', confirmPassword);\r\n        resetPassword(token, formData)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'New Password Reset'} />\r\n            <div className=\"row wrapper\">\r\n                <div className=\"col-10 col-lg-5\">\r\n                    <form className=\"shadow-lg\" onSubmit={submitHandler}>\r\n                        <h1 className=\"mb-3\">New Password</h1>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password_field\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password_field\"\r\n                                className=\"form-control\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"confirm_password_field\">Confirm Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"confirm_password_field\"\r\n                                className=\"form-control\"\r\n                                value={confirmPassword}\r\n                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            id=\"new_password_button\"\r\n                            type=\"submit\"\r\n                            className=\"btn btn-block py-3\">\r\n                            Set Password\r\n                        </button>\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default NewPassword","C:\\trynaproject\\frontend\\src\\Components\\Cart\\ConfirmOrder.js",["327"],[],"import React, { Fragment, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport MetaData from '../Layout/Metadata'\r\nimport CheckoutSteps from './CheckoutSteps'\r\nimport { getUser } from '../../utils/helpers'\r\nconst ConfirmOrder = ({cartItems, shippingInfo}) => {\r\n    const [user, setUser] = useState(getUser() ? getUser() : {})\r\n    let navigate = useNavigate();\r\n    // Calculate Order Prices\r\n    const itemsPrice = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0)\r\n    const shippingPrice = itemsPrice > 200 ? 0 : 25\r\n    const taxPrice = Number((0.05 * itemsPrice).toFixed(2))\r\n    const totalPrice = (itemsPrice + shippingPrice + taxPrice).toFixed(2)\r\n\r\n    const processToPayment = () => {\r\n        const data = {\r\n            itemsPrice: itemsPrice.toFixed(2),\r\n            shippingPrice,\r\n            taxPrice,\r\n            totalPrice\r\n        }\r\n\r\n        sessionStorage.setItem('orderInfo', JSON.stringify(data))\r\n        navigate('/payment')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Confirm Order'} />\r\n            <div className=\"center-content\">\r\n             <CheckoutSteps shipping confirmOrder />\r\n                <div className=\"image-with-text-container\">\r\n                    <img\r\n                        className=\"img-fluid\"\r\n                        src=\"/images/shopit_logo.png\"\r\n                        alt=\"img_1\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"row d-flex justify-content-between\">\r\n                <div className=\"col-12 col-lg-8 mt-5 order-confirm\">\r\n                    <div className=\"small-card\">\r\n                    <h4 className=\"mb-3\">Delivery Address</h4>\r\n                    <hr></hr>\r\n                    {getUser() && <p><b>Name:</b> {user && user.name}</p>}\r\n                    <p><b>Phone:</b> {shippingInfo.phoneNo}</p>\r\n                    <p className=\"mb-2\"><b>Address:</b></p>\r\n                    <p>{shippingInfo.address},</p>\r\n                    <p>{shippingInfo.city}, {shippingInfo.postalCode},</p>\r\n                    <p>{shippingInfo.country}</p>\r\n                    </div>\r\n\r\n                    <hr />\r\n                    <h4 className=\"mt-4\">Products Ordered \r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    &nbsp;&nbsp;&nbsp; Item Subtotal</h4>\r\n\r\n                    {cartItems.map(item => (\r\n                        <Fragment>\r\n                            <hr />\r\n                            <div className=\"cart-item my-1\" key={item.product}>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-4 col-lg-2\">\r\n                                        <img src={item.image} alt=\"Laptop\" height=\"45\" width=\"65\" />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-5 col-lg-6\">\r\n                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"col-4 col-lg-4 mt-4 mt-lg-0\">\r\n                                        <p>{item.quantity} x ${item.price} = <b>${(item.quantity * item.price).toFixed(2)}</b></p>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                        </Fragment>\r\n                    ))}\r\n\r\n                </div>\r\n\r\n                <div className=\"col-12 col-lg-4 my-8\">\r\n                    <div id=\"order_summary\">\r\n                        <h4>Order Summary</h4>\r\n                        <hr />\r\n                        <p>Subtotal:  <span className=\"order-summary-values\">${itemsPrice}</span></p>\r\n                        <p>Shipping: <span className=\"order-summary-values\">${shippingPrice}</span></p>\r\n                        <p>Tax:  <span className=\"order-summary-values\">${taxPrice}</span></p>\r\n\r\n                        <hr />\r\n\r\n                        <p>Total: <span className=\"order-summary-values\">${totalPrice}</span></p>\r\n\r\n                        <hr />\r\n                        <button id=\"checkout_btn\" className=\"btn btn-primary btn-block\" onClick={processToPayment}>Proceed to Payment</button>\r\n                    </div>\r\n                    <br/> <br/><br/>\r\n                </div>\r\n              \r\n\r\n\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ConfirmOrder","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Payment.js",["328","329","330"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport MetaData from '../Layout/Metadata'\r\nimport CheckoutSteps from './CheckoutSteps'\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getToken } from '../../utils/helpers';\r\n\r\n\r\nconst Payment = ({cartItems, shippingInfo}) => {\r\n    const [loading, setLoading] = useState(true)\r\n    let navigate = useNavigate();\r\n    const order = {\r\n        orderItems: cartItems,\r\n        shippingInfo\r\n    }\r\n\r\n    const orderInfo = JSON.parse(sessionStorage.getItem('orderInfo'));\r\n    if (orderInfo) {\r\n        order.itemsPrice = orderInfo.itemsPrice\r\n        order.shippingPrice = orderInfo.shippingPrice\r\n        order.taxPrice = orderInfo.taxPrice\r\n        order.totalPrice = orderInfo.totalPrice\r\n    }\r\n\r\n    const createOrder = async (order) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n            const { data } = await axios.post(`http://localhost:4001/api/v1/order/new`, order, config)\r\n            // setIsUpdated(data.success)\r\n            setLoading(false)\r\n            toast.success('order created', {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n           \r\n            \r\n            navigate('/success')\r\n    \r\n        } catch (error) {\r\n            toast.error(error.response.data.message, {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n           }\r\n    }\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault();\r\n        document.querySelector('#pay_btn').disabled = true;\r\n        order.paymentInfo = {\r\n            id: 'pi_1DpdYh2eZvKYlo2CYIynhU32',\r\n            status: 'succeeded'\r\n        }\r\n        createOrder(order)\r\n        navigate('/success')\r\n      }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Payment'} />\r\n            <div className=\"center-content\">\r\n            <CheckoutSteps shipping confirmOrder payment />\r\n                <div className=\"image-with-text-container\">\r\n                    <img\r\n                        className=\"img-fluid\"\r\n                        src=\"/images/shopit_logo.png\"\r\n                        alt=\"img_1\"\r\n                    />\r\n                </div>\r\n            </div>\r\n           \r\n            <div className=\"row wrapper\">\r\n                <div className=\"col-10 col-lg-5\">\r\n                    <form className=\"shadow-lg\" onSubmit={submitHandler}>\r\n                \r\n                    <h1 className=\"mb-4\">| Card Information</h1>\r\n                        <hr></hr>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"card_num_field\">Card Number</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"card_num_field\"\r\n                                className=\"form-control\"\r\n                                \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"card_exp_field\">Card Expiry</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"card_exp_field\"\r\n                                className=\"form-control\"\r\n                               \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"card_cvc_field\">Card CVC</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"card_cvc_field\"\r\n                                className=\"form-control\"\r\n                                \r\n                            />\r\n                        </div>\r\n                        <button\r\n                            id=\"pay_btn\"\r\n                            type=\"submit\"\r\n                            className=\"btn btn-block py-3\"\r\n                        >\r\n                            Pay {` - ${orderInfo && orderInfo.totalPrice}`}\r\n                        </button>\r\n\r\n                    </form>\r\n                    <br/>\r\n                </div>\r\n            </div>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Payment","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Cart.js",["331"],[],"import React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport MetaData from '../Layout/Metadata'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\n\r\nconst Cart = ({ addItemToCart, cartItems, removeItemFromCart }) => {\r\n    const navigate = useNavigate()\r\n\r\n    const increaseQty = (id, quantity, stock) => {\r\n        const newQty = quantity + 1;\r\n        if (newQty > stock) return;\r\n        addItemToCart(id, newQty);\r\n    }\r\n\r\n    const decreaseQty = (id, quantity) => {\r\n        const newQty = quantity - 1;\r\n        if (newQty <= 0) return;\r\n        addItemToCart(id, newQty);\r\n    }\r\n\r\n    const removeCartItemHandler = (id) => {\r\n        removeItemFromCart(id)\r\n    }\r\n    const checkoutHandler = () => {\r\n        navigate('/login?redirect=shipping')\r\n    }\r\n    localStorage.setItem('cartItems', JSON.stringify(cartItems))\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Your Cart'} />\r\n            {cartItems.length === 0 ? <h2 className=\"mt-5\">Your Cart is Empty</h2> : (\r\n                <Fragment>\r\n                    <h2 className=\"mt-5\">Your Cart: <b>{cartItems.length} items</b></h2>\r\n\r\n                    <div className=\"row d-flex justify-content-between\">\r\n                        <div className=\"col-12 col-lg-8\">\r\n\r\n                            {cartItems.map(item => (\r\n                                <Fragment>\r\n                                    <hr />\r\n\r\n                                    <div className=\"cart-item\" key={item.product}>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-4 col-lg-3\">\r\n                                                <img src={item.image} alt=\"Laptop\" height=\"90\" width=\"115\" />\r\n                                            </div>\r\n\r\n                                            <div className=\"col-5 col-lg-3\">\r\n                                                <Link to={`/products/${item.product}`}>{item.name}</Link>\r\n                                            </div>\r\n\r\n\r\n                                            <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\r\n                                                <p id=\"card_item_price\">${item.price}</p>\r\n                                            </div>\r\n\r\n                                            <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\r\n                                                <div className=\"stockCounter d-inline\">\r\n                                                    <span className=\"btn btn-danger minus\" onClick={() => decreaseQty(item.product, item.quantity)}>-</span>\r\n\r\n                                                    <input type=\"number\" className=\"form-control count d-inline\" value={item.quantity} readOnly />\r\n\r\n                                                    <span className=\"btn btn-primary plus\" onClick={() => increaseQty(item.product, item.quantity, item.stock)}>+</span>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div className=\"col-4 col-lg-1 mt-4 mt-lg-0\">\r\n                                                <i id=\"delete_cart_item\" className=\"fa fa-trash btn btn-danger\" onClick={() => removeCartItemHandler(item.product)} ></i>\r\n                                        \r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <hr />\r\n                                </Fragment>\r\n                            ))}\r\n\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-lg-3 my-4\">\r\n                            <div id=\"order_summary\">\r\n                                <h4>Order Summary</h4>\r\n                                <hr />\r\n                                <p>Subtotal:  <span className=\"order-summary-values\">{cartItems.reduce((acc, item) => (acc + Number(item.quantity)), 0)} (Units)</span></p>\r\n                                <p>Est. total: <span className=\"order-summary-values\">${cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2)}</span></p>\r\n\r\n\r\n                                <hr />\r\n                                <button id=\"checkout_btn\" className=\"btn btn-primary btn-block\" onClick={checkoutHandler}>Check out</button>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Cart","C:\\trynaproject\\frontend\\src\\Components\\Cart\\Shipping.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Cart\\OrderSuccess.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Order\\OrderDetails.js",["332"],[],"import React, { Fragment, useEffect, useRef, useState } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport axios from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport html2canvas from 'html2canvas'\r\nimport jsPDF from 'jspdf';\r\n\r\nimport { getToken } from '../../utils/helpers'\r\n\r\n\r\nconst OrderDetails = () => {\r\n\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [order, setOrder] = useState({})\r\n    \r\n\r\n    const { shippingInfo, orderItems, paymentInfo, user, totalPrice, orderStatus } = order\r\n    let { id } = useParams();\r\n\r\n    const downloadPDF = () => {\r\n        const capture = document.querySelector('.col-12.col-lg-8.mt-5.order-details');\r\n    \r\n        html2canvas(capture).then((canvas) => {\r\n            const imgData = canvas.toDataURL('image/png');\r\n            const pdf = new jsPDF('p', 'mm', 'a4');\r\n            const imgWidth = 210;\r\n            const imgHeight = (canvas.height * imgWidth) / canvas.width;\r\n            pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);\r\n            pdf.save('Receipt.pdf');\r\n        });\r\n    };\r\n    \r\n\r\n    const getOrderDetails = async (id) => {\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/order/${id}`, config)\r\n            setOrder(data.order)\r\n            setLoading(false)\r\n\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOrderDetails(id)\r\n\r\n        if (error) {\r\n            toast.error(error, {\r\n                position: toast.POSITION.BOTTOM_RIGHT\r\n            });\r\n        }\r\n    }, [error, id])\r\n\r\n    const shippingDetails = shippingInfo && `${shippingInfo.address}, ${shippingInfo.city}, ${shippingInfo.postalCode}, ${shippingInfo.country}`\r\n\r\n    const isPaid = paymentInfo && paymentInfo.status === 'succeeded' ? true : false\r\n\r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Order Details'} />\r\n\r\n            {loading ? <Loader /> : (\r\n                <Fragment>\r\n                \r\n                    <div className=\"row d-flex justify-content-between\">\r\n                        <div className=\"col-12 col-lg-8 mt-5 order-details\">\r\n                        <h1 className=\"mb-4\">TikTech.shop</h1>\r\n                        <h2 className=\"mb-4\">Shipping Info</h2>\r\n                        <h3 className=\"my-5\">Order # {order._id}</h3>\r\n                        <h5 className=\"mb-4\">Receiver</h5>\r\n                        \r\n                            <table className='table table-bordered'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name:</th>\r\n                                    <th>Phone:</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <td>{user && user.name}</td>\r\n                                <td>{shippingInfo && shippingInfo.phoneNo}</td>\r\n                            </tbody>\r\n                            <br />\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Address:</th>\r\n                                    <th>Amount:</th>\r\n                                </tr>\r\n                            </thead>\r\n                           \r\n                            <tbody>\r\n                                <td>{shippingDetails}</td>\r\n                                <td>${totalPrice}</td>\r\n                            </tbody>\r\n\r\n                            <br/>\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Payment:</th>\r\n                                    <th>Status:</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                <td> <p className={isPaid ? \"greenColor\" : \"redColor\"}><b>{isPaid ? \"PAID\" : \"NOT PAID\"}</b></p></td>\r\n                                <td><p className={order.orderStatus && String(order.orderStatus).includes('Delivered') ? \"greenColor\" : \"redColor\"} ><b>{orderStatus}</b></p></td>\r\n                            </tbody>\r\n\r\n             \r\n                                \r\n\r\n                            </table>\r\n                           \r\n                            <hr />\r\n                            <h4 className=\"my-4\">Order Items:</h4>\r\n                            <div className=\"cart-item my-1\">\r\n                                {orderItems && orderItems.map(item => (\r\n                                    <div key={item.product} className=\"row my-5\">\r\n                                        <div className=\"col-4 col-lg-2\">\r\n                                            <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\r\n                                        </div>\r\n\r\n                                        <div className=\"col-5 col-lg-5\">\r\n                                            <Link to={`/products/${item.product}`}>{item.name}</Link>\r\n                                        </div>\r\n\r\n\r\n                                        <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\r\n                                            <p>${item.price}</p>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\r\n                                            <p>{item.quantity} Piece(s)</p>\r\n                                        </div>\r\n                                        \r\n                                       \r\n                                    </div>\r\n                                    \r\n                                ))}\r\n                                <div>\r\n                                <button className=\"btn btn-success\" onClick={downloadPDF}>\r\n                                    Download PDF\r\n                                </button>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default OrderDetails","C:\\trynaproject\\frontend\\src\\Components\\Admin\\Dashboard.js",["333","334","335","336","337","338","339","340"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport UserSalesChart from './UserSalesChart';\r\nimport MonthlySalesChart from './MonthlySalesChart';\r\nimport ProductSalesChart from './ProductSalesChart';\r\nimport UserCharts from './UserCharts'\r\n\r\n  \r\nconst Dashboard = () => {\r\n\r\n    const [products, setProducts] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [users, setUsers] = useState([])\r\n    const [orders, setOrders] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [totalAmount, setTotalAmount] = useState([])\r\n    let outOfStock = 0;\r\n\r\n   \r\n    const getOrders = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            };\r\n    \r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/orders`, config);\r\n            setOrders(data.orders);\r\n    \r\n      \r\n    \r\n            console.log(data.orders);\r\n        } catch (error) {\r\n            console.error(error);\r\n            // Handle the error as needed\r\n        }\r\n    };\r\n\r\n    const getUsers = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            };\r\n    \r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/users`, config);\r\n            setUsers(data.users);\r\n    \r\n      \r\n    \r\n            console.log(data.users);\r\n        } catch (error) {\r\n            console.error(error);\r\n            // Handle the error as needed\r\n        }\r\n    };\r\n    \r\n    products.forEach(product => {\r\n        if (product.stock === 0) {\r\n            outOfStock += 1;\r\n        }\r\n    })\r\n\r\n    \r\n    const getAdminProducts = async () => {\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/products`, config)\r\n            console.log(data)\r\n            setProducts(data.products)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n           \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAdminProducts()\r\n         getOrders()\r\n        getUsers()\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row_1 row\">\r\n                \r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n\r\n                <div className=\"col-12 col-md-10\">\r\n                    \r\n\r\n                    {loading ? <Loader /> : (\r\n                        <Fragment>\r\n                            <MetaData title={'Admin Dashboard'} />\r\n                        \r\n                \r\n                                        <div className=\"card-body\">\r\n                                        <h1 className=\"dashboard\">Dashboard</h1>\r\n                                        <h6 className='dashboard'> Welcome to TicTech Dashboard</h6>\r\n                                        </div>\r\n                                  \r\n                            <div className=\"row pr-4\">\r\n                                <div className=\"col-xl-3 col-sm-6 mb-3\">\r\n                                    <div className=\" card_1 card text-white  o-hidden h-100\">\r\n                                        {/* <div className=\"card-body\">\r\n                                            <div className=\"text-center card-font-size\">Products<br /> <b>{products && products.length}</b></div>\r\n                                        </div> */}\r\n                                         <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        \r\n                                        <div className=\"card-body\">\r\n                                        <div className=\"text-center card-font-size\">Products<br /> <b>{products && products.length}</b></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"col-md-6\">\r\n                                    <img\r\n                                        src=\"/images/1-removebg-preview.png\"  \r\n                                        alt=\"User Image\"\r\n                                        className=\"img-fluid\"  \r\n                                    />\r\n                                    </div>\r\n                                    </div>\r\n                                        <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/products\">\r\n                                            <span className=\"float-left\">View Details</span>\r\n                                            <span className=\"float-right\">\r\n                                                <i className=\"fa fa-angle-right\"></i>\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-xl-3 col-sm-6 mb-3\">\r\n                                    <div className=\"card_1 card text-white o-hidden h-100\">\r\n\r\n                                      \r\n                                         <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        \r\n                                        <div className=\"card-body\">\r\n                                        <div className=\"text-center card-font-size\">Orders<br /> <b>{orders && orders.length}</b></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"col-md-6\">\r\n                                    <img\r\n                                        src=\"/images/2-removebg-preview.png\"  \r\n                                        alt=\"User Image\"\r\n                                        className=\"img-fluid\"  \r\n                                    />\r\n                                    </div>\r\n                                    </div>\r\n\r\n                                        <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/orders\">\r\n                                            <span className=\"float-left\">View Details</span>\r\n                                            <span className=\"float-right\">\r\n                                                <i className=\"fa fa-angle-right\"></i>\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"col-xl-3 col-sm-6 mb-3\">\r\n                                    <div className=\"card_1 card text-white o-hidden h-100\">\r\n\r\n                                    <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        \r\n                                        <div className=\"card-body\">\r\n                                        <div className=\"text-center card-font-size\">Users<br /><b>{users.length}</b></div>\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"col-md-6\">\r\n                                    <img\r\n                                        src=\"/images/4-removebg-preview.png\"  \r\n                                        alt=\"User Image\"\r\n                                        className=\"img-fluid\"  \r\n                                    />\r\n                                    </div>\r\n                                    </div>\r\n\r\n\r\n                                        <Link className=\"card-footer text-white clearfix small z-1\" to=\"/admin/users\">\r\n                                            <span className=\"float-left\">View Details</span>\r\n                                            <span className=\"float-right\">\r\n                                                <i className=\"fa fa-angle-right\"></i>\r\n                                            </span>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-xl-3 col-sm-6 mb-3\">\r\n                                    <div className=\"card_1 card text-white  o-hidden h-100\">\r\n                                    \r\n                                            <div className=\"row\">\r\n                                        <div className=\"col-md-6\">\r\n                                            \r\n                                            <div className=\"card-body\">\r\n                                            <div className=\"text-center card-font-size\">Out of Stock<br /> <b>{outOfStock}</b></div>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                        <div className=\"col-md-6\">\r\n                                        <img\r\n                                            src=\"/images/3-removebg-preview.png\"  \r\n                                            alt=\"User Image\"\r\n                                            className=\"img-fluid\"  \r\n                                        />\r\n                                        </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"row pr-5\">\r\n                        \r\n                            <div className=\"col-xl-8 col-md-6 mb-2\">\r\n                                <div className=\"card_2 card text-white o-hidden h-100\">\r\n                                <div className=\"card-header\">\r\n                                <i className=\"fas fa-chart-line me-1\"></i>\r\n                               User Chart\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <UserCharts />\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-xl-4 col-md-5 mb-2\">\r\n                                <div className=\"card_2 card text-white o-hidden h-100\">\r\n                                <div className=\"card-header\">\r\n                                <i className=\"fas fa-chart-bar me-1\"></i>\r\n                                Monthly Sales Chart\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <MonthlySalesChart />\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col-xl-4 col-md-6 mb-2\">\r\n                                <div className=\"card_2 card text-white o-hidden h-100\">\r\n                                <div className=\"card-header\">\r\n                                <i className=\"fas fa-chart-bar me-1\"></i>\r\n                               User Sales Chart\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <UserSalesChart />\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                          \r\n\r\n                            \r\n\r\n                            <div className=\"col-xl-8 col-md-6 mb-1\">\r\n                                <div className=\"card_2 card text-white o-hidden h-100\">\r\n                                <div className=\"card-header\">\r\n                                <i className=\"fas fa-chart-pie me-1\"></i>\r\n                               Product Sales Status\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <ProductSalesChart />\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n\r\n                        </Fragment>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Dashboard","C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewProduct.js",["341","342"],[],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Metadata from '../Layout/Metadata';\r\nimport Sidebar from './SideBar';\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CategoryList from './CategoryList';\r\n\r\nconst NewProduct = () => {\r\n  const [name, setName] = useState('');\r\n  const [price, setPrice] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [brand, setBrand] = useState('');\r\n  const [stock, setStock] = useState('');\r\n  const [seller, setSeller] = useState('');\r\n  const [images, setImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [success, setSuccess] = useState('');\r\n  const [categories, setCategories] = useState([]);\r\n  const [brands, setBrands] = useState([]);\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const validateForm = () => {\r\n    if (!name || !price || !description || !category || !brand || !stock || !seller || images.length === 0) {\r\n      setError('All fields are required');\r\n      return false;\r\n    }\r\n\r\n    if (isNaN(parseFloat(price)) || isNaN(parseInt(stock))) {\r\n      setError('Price and stock must be valid numbers');\r\n      return false;\r\n    }\r\n\r\n    if (parseFloat(price) <= 0 || parseInt(stock) < 0) {\r\n      setError('Price must be greater than 0 and stock must be a non-negative number');\r\n      return false;\r\n    }\r\n\r\n    setError('');\r\n    return true;\r\n  };\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.set('name', name);\r\n    formData.set('price', price);\r\n    formData.set('description', description);\r\n    formData.set('category', category);\r\n    formData.set('brand', brand);\r\n    formData.set('stock', stock);\r\n    formData.set('seller', seller);\r\n\r\n    images.forEach((image) => {\r\n      formData.append('images', image);\r\n    });\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      console.log('Form Data:', formData);\r\n\r\n      const { data } = await axios.post(`http://localhost:4001/api/v1/admin/product/new`, formData, config);\r\n\r\n      setLoading(false);\r\n      setSuccess(data.success);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setError(error.response?.data?.message || 'Something went wrong');\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImagesPreview([]);\r\n    setImages([]);\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((oldArray) => [...oldArray, reader.result]);\r\n          setImages((oldArray) => [...oldArray, reader.result]);\r\n        }\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const getCategories = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`http://localhost:4001/api/v1/admin/category`, config);\r\n      setCategories(data.category);\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Unable to fetch categories');\r\n    }\r\n  };\r\n\r\n  const getBrands = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`http://localhost:4001/api/v1/admin/brand`, config);\r\n      setBrands(data.brand);\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Unable to fetch brands');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n    getBrands();\r\n\r\n    if (error) {\r\n      toast.error(error, {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n\r\n    if (success) {\r\n      navigate('/admin/products');\r\n      toast.success('Product created successfully', {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n\r\n    setLoading(false); // Set loading to false after fetching categories and brands\r\n  }, [error, success, navigate]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Metadata title={'New Product'} />\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"col-12 col-md-10\">\r\n          <Fragment>\r\n            <div className=\"wrapper my-5\">\r\n              <form className=\"shadow-lg\" onSubmit={submitHandler} encType=\"multipart/form-data\">\r\n                <h1 className=\"mb-4\">New Product</h1>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name_field\">Name</label>\r\n                  <input type=\"text\" id=\"name_field\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"price_field\">Price</label>\r\n                  <input type=\"text\" id=\"price_field\" className=\"form-control\" value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"description_field\">Description</label>\r\n                  <textarea className=\"form-control\" id=\"description_field\" rows=\"8\" value={description} onChange={(e) => setDescription(e.target.value)}></textarea>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"category_field\">Category</label>\r\n                  <select className=\"form-control\" id=\"category_field\" value={category} onChange={(e) => setCategory(e.target.value)}>\r\n                    {categories.map((cat) => (\r\n                      <option key={cat._id} value={cat._id}>\r\n                        {cat.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"brand_field\">Brand</label>\r\n                  <select className=\"form-control\" id=\"brand_field\" value={brand} onChange={(e) => setBrand(e.target.value)}>\r\n                    {brands.map((brd) => (\r\n                      <option key={brd._id} value={brd._id}>\r\n                        {brd.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"stock_field\">Stock</label>\r\n                  <input type=\"number\" id=\"stock_field\" className=\"form-control\" value={stock} onChange={(e) => setStock(e.target.value)} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"seller_field\">Seller Name</label>\r\n                  <input type=\"text\" id=\"seller_field\" className=\"form-control\" value={seller} onChange={(e) => setSeller(e.target.value)} />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Images</label>\r\n                  <div className=\"custom-file\">\r\n                    <input type=\"file\" name=\"images\" className=\"custom-file-input\" id=\"customFile\" onChange={onChange} multiple />\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                      Choose Images\r\n                    </label>\r\n                  </div>\r\n                  {imagesPreview.map((img) => (\r\n                    <img src={img} key={img} alt=\"Images Preview\" className=\"mt-3 mr-2\" width=\"55\" height=\"52\" />\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Display error message */}\r\n                {error && (\r\n                  <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {error}\r\n                  </div>\r\n                )}\r\n\r\n                <button id=\"login_button\" type=\"submit\" className=\"btn btn-block py-3\">\r\n                  CREATE\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NewProduct;","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProcessOrder.js",["343"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Link, useParams, useNavigate,  } from 'react-router-dom'\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport axios from 'axios'\r\nimport { getToken } from '../../utils/helpers'\r\n\r\nconst ProcessOrder = () => {\r\n\r\n    const [status, setStatus] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [order, setOrder] = useState({})\r\n    const [isUpdated, setIsUpdated] = useState(false)\r\n    let navigate = useNavigate()\r\n\r\n    let { id } = useParams();\r\n    const { shippingInfo, orderItems, paymentInfo, user, totalPrice, orderStatus } = order\r\n    const orderId = id;\r\n    const errMsg = (message = '') => toast.error(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n\r\n    const successMsg = (message = '') => toast.success(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n\r\n    const getOrderDetails = async (id) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/order/${id}`, config)\r\n            setOrder(data.order)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    const updateOrder = async (id, formData) => {\r\n      \r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/admin/order/${id}`, formData, config)\r\n            setIsUpdated(data.success)\r\n            \r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOrderDetails(orderId)\r\n        if (error) {\r\n            errMsg(error);\r\n            setError('')\r\n        }\r\n        if (isUpdated) {\r\n            successMsg('Order updated successfully');\r\n            setIsUpdated('')\r\n            navigate('/admin/orders')\r\n        }\r\n    }, [error, isUpdated, orderId])\r\n\r\n    const updateOrderHandler = (id) => {\r\n        const formData = new FormData();\r\n        formData.set('status', status);\r\n        updateOrder(id, formData)\r\n    }\r\n\r\n    const shippingDetails = shippingInfo && `${shippingInfo.address}, ${shippingInfo.city}, ${shippingInfo.postalCode}, ${shippingInfo.country}`\r\n    const isPaid = paymentInfo && paymentInfo.status === 'succeeded' ? true : false\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={`Process Order # ${order && order._id}`} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        {loading ? <Loader /> : (\r\n                            <div className=\"row d-flex justify-content-around\">\r\n                                <div className=\"col-12 col-lg-7 order-details\">\r\n                                    <h2 className=\"my-5\">Order # {order._id}</h2>\r\n                                    <h4 className=\"mb-4\">Shipping Info</h4>\r\n                                    <p><b>Name:</b> {user && user.name}</p>\r\n                                    <p><b>Phone:</b> {shippingInfo && shippingInfo.phoneNo}</p>\r\n                                    <p className=\"mb-4\"><b>Address:</b>{shippingDetails}</p>\r\n                                    <p><b>Amount:</b> ${totalPrice}</p>\r\n                                    <hr />\r\n                                    <h4 className=\"my-4\">Payment</h4>\r\n                                    <p className={isPaid ? \"greenColor\" : \"redColor\"}><b>{isPaid ? \"PAID\" : \"NOT PAID\"}</b></p>\r\n                                    <h4 className=\"my-4\">Stripe ID</h4>\r\n                                    <p><b>{paymentInfo && paymentInfo.id}</b></p>\r\n\r\n                                    <h4 className=\"my-4\">Order Status:</h4>\r\n                                    <p className={order.orderStatus && String(order.orderStatus).includes('Delivered') ? \"greenColor\" : \"redColor\"} ><b>{orderStatus}</b></p>\r\n                                    <h4 className=\"my-4\">Order Items:</h4>\r\n                                    <hr />\r\n                                    <div className=\"cart-item my-1\">\r\n                                        {orderItems && orderItems.map(item => (\r\n                                            <div key={item.product} className=\"row my-5\">\r\n                                                <div className=\"col-4 col-lg-2\">\r\n                                                    <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\r\n                                                </div>\r\n\r\n                                                <div className=\"col-5 col-lg-5\">\r\n                                                    <Link to={`/products/${item.product}`}>{item.name}</Link>\r\n                                                </div>\r\n                                                <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\r\n                                                    <p>${item.price}</p>\r\n                                                </div>\r\n                                                <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\r\n                                                    <p>{item.quantity} Piece(s)</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    <hr />\r\n                                </div>\r\n                                <div className=\"col-12 col-lg-3 mt-5\">\r\n                                    <h4 className=\"my-4\">Status</h4>\r\n                                    <div className=\"form-group\">\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name='status'\r\n                                            value={status}\r\n                                            onChange={(e) => setStatus(e.target.value)}\r\n                                        >\r\n                                            <option value=\"Processing\">Processing</option>\r\n                                            <option value=\"Shipped\">Shipped</option>\r\n                                            <option value=\"Delivered\">Delivered</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <button className=\"btn btn-primary btn-block\" onClick={() => updateOrderHandler(order._id)}>\r\n                                        Update Status\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default ProcessOrder","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateProduct.js",["344"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport MetaData from '../Layout/Metadata'\r\nimport Sidebar from './SideBar'\r\n\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport axios from 'axios';\r\nimport { getToken } from '../../utils/helpers';\r\n\r\n\r\nconst UpdateProduct = () => {\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [description, setDescription] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [stock, setStock] = useState(0);\r\n    const [seller, setSeller] = useState('');\r\n    const [images, setImages] = useState([]);\r\n    const [oldImages, setOldImages] = useState([]);\r\n    const [imagesPreview, setImagesPreview] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [product, setProduct] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [updateError, setUpdateError] = useState('')\r\n    const [isUpdated, setIsUpdated] = useState(false)\r\n    \r\n\r\n    const categories = [\r\n        'Electronics',\r\n        'Cameras',\r\n        'Laptops',\r\n        'Accessories',\r\n        'Headphones',\r\n        'Food',\r\n        \"Books\",\r\n        'Clothes/Shoes',\r\n        'Beauty/Health',\r\n        'Sports',\r\n        'Outdoor',\r\n        'Home'\r\n    ]\r\n    let { id } = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const errMsg = (message = '') => toast.error(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n    const successMsg = (message = '') => toast.success(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n\r\n    const getProductDetails =  async (id) => {\r\n        try {\r\n           const { data } = await axios.get(`http://localhost:4001/api/v1/product/${id}`)\r\n           setProduct(data.product)\r\n           setLoading(false)\r\n           \r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n      \r\n    const updateProduct = async (id, productData)  => {\r\n        try {\r\n           \r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json', \r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/admin/product/${id}`, productData, config)\r\n            setIsUpdated(data.success)\r\n           \r\n        } catch (error) {\r\n            setUpdateError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (product && product._id !== id) {\r\n            getProductDetails(id)\r\n        } else {\r\n            setName(product.name);\r\n            setPrice(product.price);\r\n            setDescription(product.description);\r\n            setCategory(product.category);\r\n            setSeller(product.seller);\r\n            setStock(product.stock)\r\n            setOldImages(product.images)\r\n        }\r\n        if (error) {\r\n            errMsg(error)\r\n            \r\n        }\r\n        if (updateError) {\r\n            errMsg(updateError);\r\n           \r\n        }\r\n        if (isUpdated) {\r\n            navigate('/admin/products');\r\n            successMsg('Product updated successfully');\r\n           \r\n        }\r\n    }, [error, isUpdated, updateError, product, id])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.set('name', name);\r\n        formData.set('price', price);\r\n        formData.set('description', description);\r\n        formData.set('category', category);\r\n        formData.set('stock', stock);\r\n        formData.set('seller', seller);\r\n        images.forEach(image => {\r\n            formData.append('images', image)\r\n        })\r\n        updateProduct(product._id, formData)\r\n    }\r\n    const onChange = e => {\r\n        const files = Array.from(e.target.files)\r\n        setImagesPreview([]);\r\n        setImages([])\r\n        setOldImages([])\r\n        files.forEach(file => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                if (reader.readyState === 2) {\r\n                    setImagesPreview(oldArray => [...oldArray, reader.result])\r\n                    setImages(oldArray => [...oldArray, reader.result])\r\n                }\r\n            }\r\n            reader.readAsDataURL(file)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Update Product'} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        <div className=\"wrapper my-5\">\r\n                            <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\r\n                                <h1 className=\"mb-4\">Update Product</h1>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name_field\">Name</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"name_field\"\r\n                                        className=\"form-control\"\r\n                                        value={name}\r\n                                        onChange={(e) => setName(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"price_field\">Price</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"price_field\"\r\n                                        className=\"form-control\"\r\n                                        value={price}\r\n                                        onChange={(e) => setPrice(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"description_field\">Description</label>\r\n                                    <textarea className=\"form-control\" id=\"description_field\" rows=\"8\" value={description} onChange={(e) => setDescription(e.target.value)}></textarea>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"category_field\">Category</label>\r\n                                    <select className=\"form-control\" id=\"category_field\" value={category} onChange={(e) => setCategory(e.target.value)}>\r\n                                        {categories.map(category => (\r\n                                            <option key={category} value={category} >{category}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"stock_field\">Stock</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"stock_field\"\r\n                                        className=\"form-control\"\r\n                                        value={stock}\r\n                                        onChange={(e) => setStock(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"seller_field\">Seller Name</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"seller_field\"\r\n                                        className=\"form-control\"\r\n                                        value={seller}\r\n                                        onChange={(e) => setSeller(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className='form-group'>\r\n                                    <label>Images</label>\r\n                                    <div className='custom-file'>\r\n                                        <input\r\n                                            type='file'\r\n                                            name='images'\r\n                                            className='custom-file-input'\r\n                                            id='customFile'\r\n                                            onChange={onChange}\r\n                                            multiple\r\n                                        />\r\n                                        <label className='custom-file-label' htmlFor='customFile'>\r\n                                            Choose Images\r\n                                        </label>\r\n                                    </div>\r\n                                    {oldImages && oldImages.map(img => (\r\n                                        <img key={img} src={img.url} alt={img.url} className=\"mt-3 mr-2\" width=\"55\" height=\"52\" />\r\n                                    ))}\r\n                                    {imagesPreview.map(img => (\r\n                                        <img src={img} key={img} alt=\"Images Preview\" className=\"mt-3 mr-2\" width=\"55\" height=\"52\" />\r\n                                    ))}\r\n                                </div>\r\n                                <button\r\n                                    id=\"login_button\"\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-block py-3\"\r\n                                    disabled={loading ? true : false}\r\n                                >\r\n                                    UPDATE\r\n                                </button>\r\n                            </form>\r\n                        </div>\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateProduct","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductsList.js",["345"],[],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport MetaData from '../Layout/Metadata';\r\nimport Loader from '../Layout/Loader';\r\nimport Sidebar from './SideBar';\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst ProductsList = () => {\r\n    const [products, setProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [brands, setBrands] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [deleteError, setDeleteError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n  \r\n    let navigate = useNavigate();\r\n  \r\n    const getAdminProducts = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getToken()}`,\r\n          },\r\n        };\r\n  \r\n        const { data } = await axios.get(`http://localhost:4001/api/v1/admin/products`, config);\r\n        setProducts(data.products);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.response.data.message);\r\n      }\r\n    };\r\n  \r\n    const getCategories = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getToken()}`,\r\n          },\r\n        };\r\n  \r\n        const { data } = await axios.get(`http://localhost:4001/api/v1/admin/category`, config);\r\n        setCategories(data.category);\r\n      } catch (error) {\r\n        setError(error.response.data.message);\r\n      }\r\n    };\r\n  \r\n    const getBrands = async () => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getToken()}`,\r\n          },\r\n        };\r\n  \r\n        const { data } = await axios.get(`http://localhost:4001/api/v1/admin/brand`, config);\r\n        setBrands(data.brand);\r\n      } catch (error) {\r\n        setError(error.response.data.message);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getAdminProducts();\r\n      getCategories();\r\n      getBrands();\r\n  \r\n      if (error) {\r\n        toast.error(error, {\r\n          position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n      }\r\n  \r\n      if (deleteError) {\r\n        toast.error(deleteError, {\r\n          position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n      }\r\n  \r\n      if (isDeleted) {\r\n        toast.success('Product deleted successfully', {\r\n          position: toast.POSITION.BOTTOM_RIGHT,\r\n        });\r\n        navigate('/admin/products');\r\n      }\r\n    }, [error, deleteError, isDeleted]);\r\n  \r\n    const deleteProduct = async (id) => {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${getToken()}`,\r\n          },\r\n        };\r\n        const { data } = await axios.delete(`http://localhost:4001/api/v1/admin/product/${id}`, config);\r\n        setIsDeleted(data.success);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setDeleteError(error.response.data.message);\r\n      }\r\n    };\r\n  \r\n    const productsList = () => {\r\n      const data = {\r\n        columns: [\r\n          {\r\n            label: 'ID',\r\n            field: 'id',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Name',\r\n            field: 'name',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Price',\r\n            field: 'price',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Category',\r\n            field: 'category',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Brand',\r\n            field: 'brand',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Stock',\r\n            field: 'stock',\r\n            sort: 'asc',\r\n          },\r\n          {\r\n            label: 'Actions',\r\n            field: 'actions',\r\n          },\r\n        ],\r\n        rows: [],\r\n      };\r\n  \r\n      products.forEach((product) => {\r\n        data.rows.push({\r\n          id: product._id,\r\n          name: product.name,\r\n          price: `$${product.price}`,\r\n          stock: product.stock,\r\n          category: categories.find((cat) => cat._id === product.category)?.name || '',\r\n          brand: brands.find((brd) => brd._id === product.brand)?.name || '',\r\n          actions: (\r\n            <Fragment>\r\n              <Link to={`/admin/product/${product._id}`} className=\"btn btn-primary py-1 px-2\">\r\n                <i className=\"fa fa-pencil\"></i>\r\n              </Link>\r\n              <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteProductHandler(product._id)}>\r\n                <i className=\"fa fa-trash\"></i>\r\n              </button>\r\n            </Fragment>\r\n          ),\r\n        });\r\n      });\r\n  \r\n      return data;\r\n    };\r\n  \r\n    const deleteProductHandler = (id) => {\r\n      deleteProduct(id);\r\n    };\r\n  \r\n    return (\r\n      <Fragment>\r\n        <MetaData title={'All Products'} />\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-md-2\">\r\n            <Sidebar />\r\n          </div>\r\n  \r\n          <div className=\"col-12 col-md-10\">\r\n            <Fragment>\r\n              <h1 className=\"my-5\">All Products</h1>\r\n              <button className=\"procreate ml-auto\">\r\n                <Link to=\"/admin/product\" className=\"procreate\">\r\n                  <i className=\"fa fa-plus\"></i>Create a Product\r\n                </Link>\r\n              </button>\r\n              {loading ? <Loader /> : <MDBDataTable data={productsList()} className=\"px-3\" bordered striped hover />}\r\n            </Fragment>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n  \r\n  export default ProductsList;","C:\\trynaproject\\frontend\\src\\Components\\Order\\ListOrders.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\UsersList.js",["346","347","348"],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateUser.js",["349","350","351"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport MetaData from '../Layout/Metadata'\r\nimport Sidebar from './SideBar'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { errMsg, successMsg } from '../../utils/helpers';\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios';\r\n\r\nconst UpdateUser = () => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [role, setRole] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [user, setUser] = useState(true)\r\n    const [isUpdated, setIsUpdated] = useState(false)\r\n    let navigate = useNavigate();\r\n\r\n    const { id } = useParams();\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json', \r\n            'Authorization': `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    const getUserDetails = async (id) => {\r\n    \r\n        try {\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/user/${id}`,config)\r\n            setUser(data.user)\r\n            setLoading(false)\r\n            \r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const updateUser = async (id, userData) => {\r\n        try {\r\n            const { data } = await axios.put(`http://localhost:4001/api/v1/admin/user/${id}`, userData, config)\r\n            setIsUpdated(data.success)\r\n            setLoading(false)\r\n            \r\n        } catch (error) {\r\n           setError(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(user && user._id !== userId);\r\n        if (user && user._id !== id) {\r\n            getUserDetails(id)\r\n        } else {\r\n            setName(user.name);\r\n            setEmail(user.email);\r\n            setRole(user.role)\r\n        }\r\n        if (error) {\r\n            errMsg(error);\r\n            setError('');\r\n        }\r\n        if (isUpdated) {\r\n            successMsg('User updated successfully')\r\n            navigate('/admin/users')\r\n           \r\n        }\r\n    }, [error, isUpdated, id, user])\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.set('name', name);\r\n        formData.set('email', email);\r\n        formData.set('role', role);\r\n        updateUser(user._id, formData)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={`Update User`} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <div className=\"row wrapper\">\r\n                        <div className=\"col-10 col-lg-5\">\r\n                            <form className=\"shadow-lg\" onSubmit={submitHandler}>\r\n                                <h1 className=\"mt-2 mb-5\">Update User</h1>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name_field\">Name</label>\r\n                                    <input\r\n                                        type=\"name\"\r\n                                        id=\"name_field\"\r\n                                        className=\"form-control\"\r\n                                        name='name'\r\n                                        value={name}\r\n                                        onChange={(e) => setName(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email_field\">Email</label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        id=\"email_field\"\r\n                                        className=\"form-control\"\r\n                                        name='email'\r\n                                        value={email}\r\n                                        onChange={(e) => setEmail(e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"role_field\">Role</label>\r\n                                    <select\r\n                                        id=\"role_field\"\r\n                                        className=\"form-control\"\r\n                                        name='role'\r\n                                        value={role}\r\n                                        onChange={(e) => setRole(e.target.value)}\r\n                                    >\r\n                                        <option value=\"user\">user</option>\r\n                                        <option value=\"admin\">admin</option>\r\n                                    </select>\r\n                                </div>\r\n                                <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\" >Update</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default UpdateUser","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateCategory.js",["352","353","354"],[],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport MetaData from \"../Layout/Metadata\";\r\nimport Sidebar from \"./SideBar\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { getToken } from \"../../utils/helpers\";\r\n\r\nconst UpdateCategory = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [oldImages, setOldImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [nameError, setNameError] = useState(\"\");\r\n  const [imagesError, setImagesError] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [updateError, setUpdateError] = useState(\"\");\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  const errMsg = (message = \"\") =>\r\n    toast.error(message, {\r\n      position: toast.POSITION.BOTTOM_CENTER,\r\n    });\r\n  const successMsg = (message = \"\") =>\r\n    toast.success(message, {\r\n      position: toast.POSITION.BOTTOM_CENTER,\r\n    });\r\n    // console.log(category)\r\n  const getCategoryDetails = async (id) => {\r\n    try {\r\n      const { data } = await axios.get(\r\n        `http://localhost:4001/api/v1/category/${id}`\r\n      );\r\n      setCategory(data);\r\n      // console.log(data);\r\n      setName(data.name)\r\n      setOldImages(data.images);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  const UpdateCategory = async (id, categoryData) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `http://localhost:4001/api/v1/admin/category/${id}`,\r\n        categoryData,\r\n        config\r\n      );\r\n      setIsUpdated(data.success);\r\n    } catch (error) {\r\n      setUpdateError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategoryDetails(id);\r\n    if (category && category._id !== id) {\r\n    } else {\r\n      setName(category.name);\r\n      setOldImages(category.images);\r\n    }\r\n    if (error) {\r\n      errMsg(error);\r\n    }\r\n    if (updateError) {\r\n      errMsg(updateError);\r\n    }\r\n    if (isUpdated) {\r\n      navigate(\"/admin/category\");\r\n      successMsg(\"category updated successfully\");\r\n    }\r\n  }, [isUpdated]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate form fields\r\n    if (validateForm()) {\r\n      const formData = new FormData();\r\n      formData.set(\"name\", name);\r\n      images.forEach((image) => {\r\n        formData.append(\"images\", image);\r\n      });\r\n\r\n      UpdateCategory(category._id, formData);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImagesPreview([]);\r\n    setImages([]);\r\n    setOldImages([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((oldArray) => [...oldArray, reader.result]);\r\n          setImages((oldArray) => [...oldArray, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n\r\n    // Validate Name\r\n    if (!name || !name.trim()) {\r\n      setNameError(\"Name is required\");\r\n      isValid = false;\r\n    } else {\r\n      setNameError(\"\");\r\n    }\r\n\r\n    // Validate Images\r\n    // if (images.length === 0) {\r\n    //   setImagesError(\"Images are required\");\r\n    //   isValid = false;\r\n    // } else {\r\n    //   setImagesError(\"\");\r\n    // }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <MetaData title={\"Update Category\"} />\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <Sidebar />\r\n        </div>\r\n        <div className=\"col-12 col-md-10\">\r\n          <Fragment>\r\n            <div className=\"wrapper my-5\">\r\n              <form\r\n                className=\"shadow-lg\"\r\n                onSubmit={submitHandler}\r\n                // encType=\"multipart/form-data\"\r\n              >\r\n                <h1 className=\"mb-4\">Update Category</h1>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name_field\">Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name_field\"\r\n                    className={`form-control ${nameError ? \"is-invalid\" : \"\"}`}\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                  {nameError && (\r\n                    <div className=\"invalid-feedback\">{nameError}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Images</label>\r\n                  <div className=\"custom-file\">\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"images\"\r\n                      className={`custom-file-input ${\r\n                        imagesError ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                      id=\"customFile\"\r\n                      onChange={onChange}\r\n                      multiple\r\n                    />\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                      Choose Images\r\n                    </label>\r\n                  </div>\r\n                  {oldImages &&\r\n                    oldImages.map((img) => (\r\n                      <img\r\n                        key={img}\r\n                        src={img.url}\r\n                        alt={img.url}\r\n                        className=\"mt-3 mr-2\"\r\n                        width=\"55\"\r\n                        height=\"52\"\r\n                      />\r\n                    ))}\r\n                  {imagesPreview.map((img) => (\r\n                    <img\r\n                      src={img}\r\n                      key={img}\r\n                      alt=\"Images Preview\"\r\n                      className=\"mt-3 mr-2\"\r\n                      width=\"55\"\r\n                      height=\"52\"\r\n                    />\r\n                  ))}\r\n                  {imagesError && (\r\n                    <div className=\"invalid-feedback\">{imagesError}</div>\r\n                  )}\r\n                </div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn update-btn btn-block mt-4 mb-3\"\r\n                >\r\n                  Update\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateCategory;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Admin\\CategoryList.js",["355","356","357","358"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\nimport axios from 'axios';\r\nimport { getToken, successMsg, errMsg } from '../../utils/helpers';\r\nimport Toast from '../Layout/Toast';\r\n\r\nconst CategoryList = () => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [deleteError, setDeleteError] = useState('')\r\n    const [category, setCategory] = useState([])\r\n    const [isDeleted, setIsDeleted] = useState('')\r\n    let navigate = useNavigate();\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json', \r\n            'Authorization': `Bearer ${getToken()}`\r\n        }\r\n    }\r\n\r\n    const listCategory = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                  Authorization: `Bearer ${getToken()}`,\r\n                },\r\n              };\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/category`, config)\r\n            setCategory(data.category)\r\n            setLoading(false)\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n\r\n    const deleteCategory = async (id) => {\r\n        try {\r\n            const { data } = await axios.delete(`http://localhost:4001/api/v1/admin/category/${id}`, config)\r\n            setIsDeleted(data.success)\r\n            setLoading(false)\r\n            \r\n        } catch (error) {\r\n           setError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        listCategory();\r\n        if (error) {\r\n            errMsg(error);\r\n            setError('')\r\n        }\r\n        if (isDeleted) {\r\n            successMsg('Category deleted successfully');\r\n            navigate('/admin/category');\r\n\r\n        }\r\n\r\n    }, [error, deleteError, isDeleted,])\r\n\r\n\r\n    const deleteCategoryHandler = (id) => {\r\n       deleteCategory(id)\r\n    }\r\n    const setCategories = () => {\r\n        const data = {\r\n            columns: [\r\n                {\r\n                   label: 'Category ID',\r\n                    field: 'id',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Category Name',\r\n                    field: 'name',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Actions',\r\n                    field: 'actions',\r\n                },\r\n            ],\r\n            rows: []\r\n        }\r\n        category.forEach(category => {\r\n            data.rows.push({\r\n                id: category._id,\r\n                name: category.name,\r\n                image: category.images.url,\r\n                actions: <Fragment>\r\n                    <Link to={`/admin/category/${category._id}`} className=\"btn btn-primary py-1 px-2\">\r\n                        <i className=\"fa fa-pencil\"></i>\r\n                    </Link>\r\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteCategoryHandler(category._id)}>\r\n                        <i className=\"fa fa-trash\"></i>\r\n                    </button>\r\n                </Fragment>\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n\r\n    console.log(category)\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'All Users'} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        <h1 className=\"my-4\">All Category</h1>\r\n                        <button className='procreate  ml-auto'>\r\n                        <Link to=\"/admin/category/new\" className=\"procreate\"><i className=\"fa fa-plus\"></i>Create a Category</Link>\r\n                        </button>\r\n                        {loading ? <Loader /> : (\r\n                            <MDBDataTable\r\n                                data={setCategories()}\r\n                                className=\"px-3\"\r\n                                bordered\r\n                                striped\r\n                                hover\r\n                            />\r\n                        )}\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CategoryList","C:\\trynaproject\\frontend\\src\\Components\\Admin\\newCategory.js",["359","360","361"],[],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MetaData from '../Layout/Metadata';\r\nimport Sidebar from './SideBar';\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst NewCategory = () => {\r\n  const [name, setName] = useState('');\r\n  const [images, setImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [nameError, setNameError] = useState('');\r\n  const [imagesError, setImagesError] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [success, setSuccess] = useState('');\r\n  const [category, setCategory] = useState({});\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n\r\n    // Validate Name\r\n    if (!name.trim()) {\r\n      setNameError('Name is required');\r\n      isValid = false;\r\n    } else {\r\n      setNameError('');\r\n    }\r\n\r\n    // Validate Images\r\n    if (images.length === 0) {\r\n      setImagesError('Images are required');\r\n      isValid = false;\r\n    } else {\r\n      setImagesError('');\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (validateForm()) {\r\n      const formData = new FormData();\r\n      formData.set('name', name);\r\n\r\n      images.forEach((image) => {\r\n        formData.append('images', image);\r\n      });\r\n\r\n      newCategory(formData);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImagesPreview([]);\r\n    setImages([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((oldArray) => [...oldArray, reader.result]);\r\n          setImages((oldArray) => [...oldArray, reader.result]);\r\n        }\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const newCategory = async (formData) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        `http://localhost:4001/api/v1/admin/category/new`,\r\n        formData,\r\n        config\r\n      );\r\n      setLoading(false);\r\n      setSuccess(data.success);\r\n      setCategory(data.category);\r\n    } catch (error) {\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error, {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n\r\n    if (success) {\r\n      navigate('/admin/Category');\r\n      toast.success('Category created successfully', {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n  }, [error, success]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <MetaData title={'New Category'} />\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <Sidebar />\r\n        </div>\r\n        <div className=\"col-12 col-md-10\">\r\n          <Fragment>\r\n            <div className=\"wrapper my-5\">\r\n              <form\r\n                className=\"shadow-lg\"\r\n                onSubmit={submitHandler}\r\n                encType=\"multipart/form-data\"\r\n              >\r\n                <h1 className=\"mb-4\">New Category</h1>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name_field\">Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name_field\"\r\n                    className={`form-control ${nameError ? 'is-invalid' : ''}`}\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                  {nameError && <div className=\"invalid-feedback\">{nameError}</div>}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Images</label>\r\n\r\n                  <div className=\"custom-file\">\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"images\"\r\n                      className={`custom-file-input ${imagesError ? 'is-invalid' : ''}`}\r\n                      id=\"customFile\"\r\n                      onChange={onChange}\r\n                      multiple\r\n                    />\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                      Choose Images\r\n                    </label>\r\n                  </div>\r\n                  {imagesError && <div className=\"invalid-feedback\">{imagesError}</div>}\r\n\r\n                  {imagesPreview.map((img) => (\r\n                    <img\r\n                      src={img}\r\n                      key={img}\r\n                      alt=\"Images Preview\"\r\n                      className=\"mt-3 mr-2\"\r\n                      width=\"55\"\r\n                      height=\"52\"\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n                <button id=\"login_button\" type=\"submit\" className=\"btn btn-block py-3\">\r\n                  CREATE\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NewCategory;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Admin\\OrdersList.js",["362"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getToken } from '../../utils/helpers'\r\nimport axios from 'axios'\r\n\r\nconst OrdersList = () => {\r\n    let navigate = useNavigate();\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [allOrders, setAllOrders] = useState([])\r\n    const [isDeleted, setIsDeleted] = useState(false)\r\n    const errMsg = (message = '') => toast.error(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n    const successMsg = (message = '') => toast.success(message, {\r\n        position: toast.POSITION.BOTTOM_CENTER\r\n    });\r\n\r\n    const listOrders = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/orders`, config)\r\n            setAllOrders(data.orders)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    const deleteOrder = async (id) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n            const { data } = await axios.delete(`http://localhost:4001/api/v1/admin/order/${id}`, config)\r\n            setIsDeleted(data.success)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        listOrders()\r\n        if (error) {\r\n            errMsg(error)\r\n            setError('')\r\n        }\r\n        if (isDeleted) {\r\n            successMsg('Order deleted successfully');\r\n            navigate('/admin/orders');\r\n        }\r\n    }, [error, isDeleted])\r\n    const deleteOrderHandler = (id) => {\r\n        deleteOrder(id)\r\n    }\r\n    const setOrders = () => {\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'Order ID',\r\n                    field: 'id',\r\n                    sort: 'asc'\r\n                },\r\n\r\n                {\r\n                    label: 'No of Items',\r\n                    field: 'numofItems',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Amount',\r\n                    field: 'amount',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Status',\r\n                    field: 'status',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Actions',\r\n                    field: 'actions',\r\n                },\r\n            ],\r\n            rows: []\r\n        }\r\n\r\n        allOrders.forEach(order => {\r\n            data.rows.push({\r\n                id: order._id,\r\n                numofItems: order.orderItems.length,\r\n                amount: `$${order.totalPrice}`,\r\n                status: order.orderStatus && String(order.orderStatus).includes('Delivered')\r\n                    ? <p style={{ color: 'green' }}>{order.orderStatus}</p>\r\n                    : <p style={{ color: 'red' }}>{order.orderStatus}</p>,\r\n                actions: <Fragment>\r\n                    <Link to={`/admin/order/${order._id}`} className=\"btn btn-primary py-1 px-2\">\r\n                        <i className=\"fa fa-eye\"></i>\r\n                    </Link>\r\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteOrderHandler(order._id)}>\r\n                        <i className=\"fa fa-trash\"></i>\r\n                    </button>\r\n                </Fragment>\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'All Orders'} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        <h1 className=\"my-5\">All Orders</h1>\r\n                        {loading ? <Loader /> : (\r\n                            <MDBDataTable\r\n                                data={setOrders()}\r\n                                className=\"px-3\"\r\n                                bordered\r\n                                striped\r\n                                hover\r\n                            />\r\n                        )}\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default OrdersList","C:\\trynaproject\\frontend\\src\\Components\\Admin\\UpdateBrand.js",["363","364"],[],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport MetaData from \"../Layout/Metadata\";\r\nimport Sidebar from \"./SideBar\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { getToken } from \"../../utils/helpers\";\r\n\r\nconst UpdateBrand = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [brand, setBrand] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [oldImages, setOldImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [nameError, setNameError] = useState(\"\");\r\n  const [imagesError, setImagesError] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [updateError, setUpdateError] = useState(\"\");\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  const errMsg = (message = \"\") =>\r\n    toast.error(message, {\r\n      position: toast.POSITION.BOTTOM_CENTER,\r\n    });\r\n  const successMsg = (message = \"\") =>\r\n    toast.success(message, {\r\n      position: toast.POSITION.BOTTOM_CENTER,\r\n    });\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n\r\n    // Validate Name\r\n    if (!name || !name.trim()) {\r\n      setNameError(\"Name is required\");\r\n      isValid = false;\r\n    } else {\r\n      setNameError(\"\");\r\n    }\r\n\r\n    // Validate Images\r\n    if (images.length === 0) {\r\n      setImagesError(\"Images are required\");\r\n      isValid = false;\r\n    } else {\r\n      setImagesError(\"\");\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const getCategoryDetails = async (id) => {\r\n    try {\r\n      const { data } = await axios.get(\r\n        `http://localhost:4001/api/v1/admin/brand/${id}`\r\n      );\r\n      setBrand(data.brand);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  const UpdateBrand = async (id, brandData) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `http://localhost:4001/api/v1/admin/brand/${id}`,\r\n        brandData,\r\n        config\r\n      );\r\n      setIsUpdated(data.success);\r\n    } catch (error) {\r\n      setUpdateError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (brand && brand._id !== id) {\r\n      getCategoryDetails(id);\r\n    } else {\r\n      setName(brand.name);\r\n      setOldImages(brand.images);\r\n    }\r\n    if (error) {\r\n      errMsg(error);\r\n    }\r\n    if (updateError) {\r\n      errMsg(updateError);\r\n    }\r\n    if (isUpdated) {\r\n      navigate(\"/admin/brand\");\r\n      successMsg(\"Brand updated successfully\");\r\n    }\r\n  }, [error, isUpdated, updateError, brand, id]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Perform form validation\r\n    if (validateForm()) {\r\n      const formData = new FormData();\r\n      formData.set(\"name\", name);\r\n      images.forEach((image) => {\r\n        formData.append(\"images\", image);\r\n      });\r\n      console.log(images);\r\n      UpdateBrand(brand._id, formData);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImagesPreview([]);\r\n    setImages([]);\r\n    setOldImages([]);\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((oldArray) => [...oldArray, reader.result]);\r\n          setImages((oldArray) => [...oldArray, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <MetaData title={\"Update Brand\"} />\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <Sidebar />\r\n        </div>\r\n        <div className=\"col-12 col-md-10\">\r\n          <Fragment>\r\n            <div className=\"wrapper my-5\">\r\n              <form className=\"shadow-lg\" onSubmit={submitHandler}>\r\n                <h1 className=\"mb-4\">Update Brand</h1>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name_field\">Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name_field\"\r\n                    className=\"form-control\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                  <p className=\"error-message\">{nameError}</p>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Images</label>\r\n                  <div className=\"custom-file\">\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"images\"\r\n                      className=\"custom-file-input\"\r\n                      id=\"customFile\"\r\n                      onChange={onChange}\r\n                      multiple\r\n                    />\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                      Choose Images\r\n                    </label>\r\n                  </div>\r\n                  {oldImages &&\r\n                    oldImages.map((img) => (\r\n                      <img\r\n                        key={img}\r\n                        src={img.url}\r\n                        alt={img.url}\r\n                        className=\"mt-3 mr-2\"\r\n                        width=\"55\"\r\n                        height=\"52\"\r\n                      />\r\n                    ))}\r\n                  {imagesPreview.map((img) => (\r\n                    <img\r\n                      src={img}\r\n                      key={img}\r\n                      alt=\"Images Preview\"\r\n                      className=\"mt-3 mr-2\"\r\n                      width=\"55\"\r\n                      height=\"52\"\r\n                    />\r\n                  ))}\r\n                  <p className=\"error-message\">{imagesError}</p>\r\n                </div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn update-btn btn-block mt-4 mb-3\"\r\n                >\r\n                  Update\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdateBrand;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewBrand.js",["365","366","367"],[],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MetaData from '../Layout/Metadata';\r\nimport Sidebar from './SideBar';\r\nimport { getToken } from '../../utils/helpers';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst NewBrand = () => {\r\n  const [name, setName] = useState('');\r\n  const [images, setImages] = useState([]);\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [nameError, setNameError] = useState('');\r\n  const [imagesError, setImagesError] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [success, setSuccess] = useState('');\r\n  const [brand, setBrand] = useState({});\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n\r\n    // Validate Name\r\n    if (!name.trim()) {\r\n      setNameError('Name is required');\r\n      isValid = false;\r\n    } else {\r\n      setNameError('');\r\n    }\r\n\r\n    // Validate Images\r\n    if (images.length === 0) {\r\n      setImagesError('Images are required');\r\n      isValid = false;\r\n    } else {\r\n      setImagesError('');\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (validateForm()) {\r\n      const formData = new FormData();\r\n      formData.set('name', name);\r\n\r\n      images.forEach((image) => {\r\n        formData.append('images', image);\r\n      });\r\n\r\n      newBrand(formData);\r\n    }\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImagesPreview([]);\r\n    setImages([]);\r\n\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((oldArray) => [...oldArray, reader.result]);\r\n          setImages((oldArray) => [...oldArray, reader.result]);\r\n        }\r\n      };\r\n\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const newBrand = async (formData) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        `http://localhost:4001/api/v1/admin/brand/new`,\r\n        formData,\r\n        config\r\n      );\r\n      setLoading(false);\r\n      setSuccess(data.success);\r\n      setBrand(data.brand);\r\n    } catch (error) {\r\n      setError(error.response.data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error, {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n\r\n    if (success) {\r\n      navigate('/admin/brand');\r\n      toast.success('Brand created successfully', {\r\n        position: toast.POSITION.BOTTOM_RIGHT,\r\n      });\r\n    }\r\n  }, [error, success]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <MetaData title={'New Brand'} />\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-md-2\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"col-12 col-md-10\">\r\n          <Fragment>\r\n            <div className=\"wrapper my-5\">\r\n              <form\r\n                className=\"shadow-lg\"\r\n                onSubmit={submitHandler}\r\n                encType=\"multipart/form-data\"\r\n              >\r\n                <h1 className=\"mb-4\">New Brand</h1>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name_field\">Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name_field\"\r\n                    className={`form-control ${nameError ? 'is-invalid' : ''}`}\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                  {nameError && (\r\n                    <div className=\"invalid-feedback\">{nameError}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Images</label>\r\n\r\n                  <div className=\"custom-file\">\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"images\"\r\n                      className={`custom-file-input ${\r\n                        imagesError ? 'is-invalid' : ''\r\n                      }`}\r\n                      id=\"customFile\"\r\n                      onChange={onChange}\r\n                      multiple\r\n                    />\r\n                    <label className=\"custom-file-label\" htmlFor=\"customFile\">\r\n                      Choose Images\r\n                    </label>\r\n                  </div>\r\n                  {imagesError && (\r\n                    <div className=\"invalid-feedback\">{imagesError}</div>\r\n                  )}\r\n\r\n                  {imagesPreview.map((img) => (\r\n                    <img\r\n                      src={img}\r\n                      key={img}\r\n                      alt=\"Images Preview\"\r\n                      className=\"mt-3 mr-2\"\r\n                      width=\"55\"\r\n                      height=\"52\"\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n                <button\r\n                  id=\"login_button\"\r\n                  type=\"submit\"\r\n                  className=\"btn btn-block py-3\"\r\n                >\r\n                  CREATE\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </Fragment>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default NewBrand;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Admin\\BrandList.js",["368","369","370","371"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { MDBDataTable } from 'mdbreact'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\nimport axios from 'axios';\r\nimport { getToken, successMsg, errMsg } from '../../utils/helpers';\r\nimport Toast from '../Layout/Toast';\r\n\r\nconst BrandList = () => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const [deleteError, setDeleteError] = useState('')\r\n    const [brand, setBrand] = useState([])\r\n    const [isDeleted, setIsDeleted] = useState('')\r\n    let navigate = useNavigate();\r\n    \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json', \r\n            'Authorization': `Bearer ${getToken()}`\r\n        }\r\n    }\r\n\r\n    const listBrand = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                  Authorization: `Bearer ${getToken()}`,\r\n                },\r\n              };\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/brand`, config)\r\n            setBrand(data.brand)\r\n            setLoading(false)\r\n\r\n        // } catch (error) {\r\n        //     setError(error.response.data.message)\r\n             } catch (err) {\r\n                console.error('getBrand error:', err)\r\n            \r\n        }\r\n    }\r\n\r\n    const deleteBrand = async (id) => {\r\n        try {\r\n            const { data } = await axios.delete(`http://localhost:4001/api/v1/admin/brand/${id}`, config)\r\n            setIsDeleted(data.success)\r\n            setLoading(false)\r\n            \r\n        } catch (error) {\r\n           setError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        listBrand();\r\n        if (error) {\r\n            errMsg(error);\r\n            setError('')\r\n        }\r\n        if (isDeleted) {\r\n            successMsg('Brand deleted successfully');\r\n            navigate('/admin/brand');\r\n\r\n        }\r\n\r\n    }, [error, deleteError, isDeleted,])\r\n\r\n\r\n    const deleteBrandHandler = (id) => {\r\n       deleteBrand(id)\r\n    }\r\n    \r\n    const setBrands = () => {\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'Brand ID',\r\n                    field: 'id',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Brand Name',\r\n                    field: 'name',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Image',\r\n                    field: 'image',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Actions',\r\n                    field: 'actions',\r\n                },\r\n            ],\r\n            rows: []\r\n        }\r\n        brand.forEach(brand => {\r\n            data.rows.push({\r\n                id: brand._id,\r\n                name: brand.name,\r\n                image: brand.images.url,\r\n                actions: <Fragment>\r\n                    <Link to={`/admin/brand/${brand._id}`} className=\"btn btn-primary py-1 px-2\">\r\n                        <i className=\"fa fa-pencil\"></i>\r\n                    </Link>\r\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteBrandHandler(brand._id)}>\r\n                        <i className=\"fa fa-trash\"></i>\r\n                    </button>\r\n                </Fragment>\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n\r\n    console.log(brand)\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'All Brand'} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        <h1 className=\"my-5\">All Brands</h1>\r\n                        <button className='procreate  ml-auto'>\r\n                        <Link to=\"/admin/brand/new\" className=\"procreate\"><i className=\"fa fa-plus\"></i>Create a Brand</Link>\r\n                        </button>\r\n                        {loading ? <Loader /> : (\r\n                            <MDBDataTable\r\n                                data={setBrands()}\r\n                                className=\"px-3\"\r\n                                bordered\r\n                                striped\r\n                                hover\r\n                            />\r\n                        )}\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default BrandList","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductReviews.js",["372","373","374","375"],[],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { MDBDataTable } from 'mdbreact'\r\n\r\nimport MetaData from '../Layout/Metadata'\r\nimport Loader from '../Layout/Loader'\r\nimport Sidebar from './SideBar'\r\nimport Toast from '../Layout/Toast'\r\nimport Swal from 'sweetalert2'\r\nimport { getUser, getToken, } from '../../utils/helpers'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst ProductReviews = () => {\r\n    const [productId, setProductId] = useState('')\r\n    const [error, setError] = useState('')\r\n    const [listReviews, setListReviews] = useState([])\r\n    const [deleteError, setDeleteError] = useState('')\r\n    const [isDeleted, setIsDeleted] = useState(false)\r\n    const [user, setUser] = useState(getUser())\r\n   \r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${getToken()}`\r\n        }\r\n    }\r\n\r\n    const getProductReviews = async (id) => {\r\n        try {\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/reviews?id=${id}`, config)\r\n            setListReviews(data.reviews)\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    const deleteReview = async (id, productId) => {\r\n        try {\r\n            const { data } = await axios.delete(`http://localhost:4001/api/v1/reviews?id=${id}&productId=${productId}`, config)\r\n            setIsDeleted(data.success)\r\n\r\n        } catch (error) {\r\n            setDeleteError(error.response.data.message);\r\n        }\r\n    }\r\n\r\n    const deleteReviewHandler = (id) => {\r\n        Swal.fire({\r\n            title: 'Delete User',\r\n            icon: 'info',\r\n            text: 'Do you want to delete this user',\r\n            confirmButtonText: 'Delete',\r\n            showCancelButton: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                deleteReview(id, productId)\r\n            }\r\n        })\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (error) {\r\n            Toast('error fetching reviews', 'error')\r\n            setError('')\r\n        }\r\n\r\n        if (deleteError) {\r\n            Toast(deleteError, 'error');\r\n            setDeleteError('')\r\n        }\r\n\r\n        if (productId !== '') {\r\n            getProductReviews(productId)\r\n        }\r\n\r\n        if (isDeleted) {\r\n            Toast('Review deleted successfully', 'success');\r\n            setIsDeleted(false)\r\n        }\r\n    }, [error, productId, isDeleted, deleteError])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        getProductReviews(productId)\r\n    }\r\n\r\n    const setReviews = () => {\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'Review ID',\r\n                    field: 'id',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Rating',\r\n                    field: 'rating',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Comment',\r\n                    field: 'comment',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'User',\r\n                    field: 'user',\r\n                    sort: 'asc'\r\n                },\r\n                {\r\n                    label: 'Actions',\r\n                    field: 'actions',\r\n                },\r\n            ],\r\n            rows: []\r\n        }\r\n\r\n        listReviews.forEach(review => {\r\n            data.rows.push({\r\n                id: review._id,\r\n                rating: review.rating,\r\n                comment: review.comment,\r\n                user: review.name,\r\n\r\n                actions:\r\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteReviewHandler(review._id)}>\r\n                        <i className=\"fa fa-trash\"></i>\r\n                    </button>\r\n\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaData title={'Product Reviews'} />\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"col-12 col-md-10\">\r\n                    <Fragment>\r\n                        <div className=\"row justify-content-center mt-5\">\r\n                            <div className=\"col-5\">\r\n                                <form onSubmit={submitHandler}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"productId_field\">Enter Product ID</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"productId_field\"\r\n                                            className=\"form-control\"\r\n                                            value={productId}\r\n                                            onChange={(e) => setProductId(e.target.value)}\r\n                                        />\r\n                                    </div>\r\n                                    <button\r\n                                        id=\"search_button\"\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-primary btn-block py-2\"\r\n                                    >\r\n                                        SEARCH\r\n                                    </button>\r\n                                </ form>\r\n                            </div>\r\n                        </div>\r\n                        {listReviews && listReviews.length > 0 ? (\r\n                            <MDBDataTable\r\n                                data={setReviews()}\r\n                                className=\"px-3\"\r\n                                bordered\r\n                                striped\r\n                                hover\r\n                            />\r\n                        ) : (\r\n                            <p className=\"mt-5 text-center\">No Reviews.</p>\r\n                        )}\r\n                    </Fragment>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ProductReviews","C:\\trynaproject\\frontend\\src\\Components\\Route\\ProtectedRoute.js",["376","377","378","379","380","381"],[],"import React, {useState} from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nimport Loader from '../Layout/Loader'\r\nimport { getUser } from '../../utils/helpers';\r\n\r\nconst ProtectedRoute = ({ children, isAdmin = false }) => {\r\n    const [loading, setLoading] = useState(getUser() === false && false )\r\n    const [error, setError] = useState('')\r\n    const [user, setUser] = useState(getUser())\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n    console.log(children.type.name, loading)\r\n    \r\n    if (loading === false) {\r\n        if (!user) {\r\n            return <Navigate to='/login' />\r\n        }\r\n        if (isAdmin === true && user.role !== 'admin') {\r\n            return <Navigate to='/' />\r\n        }\r\n        return children\r\n    }\r\n    return <Loader />;\r\n\r\n};\r\n\r\nexport default ProtectedRoute;","C:\\trynaproject\\frontend\\src\\Components\\Product\\Product.js",["382","383"],[],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Product = ({ product }) => {\r\n  return (\r\n    <div className=\"col-sm-12 col-md-6 col-lg-3 my-3\">\r\n      <Link to={`/product/${product._id}`} className=\"card_3 card p-3 rounded\">\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={\r\n            product.images && product.images.length > 0 && product.images[0].url\r\n          }\r\n        />\r\n        <div className=\"card-body d-flex flex-column\">\r\n          <h5 className=\"card-title\">\r\n            <a href={`/product/${product._id}`}>{product.name}</a>\r\n          </h5>\r\n          <p className=\"card-text\">${product.price}</p>\r\n\r\n          <div className=\"ratings mt-auto\">\r\n            <div className=\"rating-outer\">\r\n              <div\r\n                className=\"rating-inner\"\r\n                style={{ width: `${(product.ratings / 5) * 100}%` }}\r\n              ></div>\r\n            </div>\r\n            <span id=\"no_of_reviews\">({product.numOfReviews} reviews)</span>\r\n          </div>\r\n          \r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Metadata.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Layout\\Loader.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Layout\\Search.js",[],[],"C:\\trynaproject\\frontend\\src\\utils\\helpers.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Cart\\CheckoutSteps.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\UserSalesChart.js",["384","385"],[],"import React, { useState, useEffect } from 'react'\r\n// import {\r\n//     BarChart,\r\n//     Bar,\r\n//     XAxis,\r\n//     YAxis,\r\n//     CartesianGrid,\r\n//     Tooltip,\r\n//     Legend,\r\n//     ResponsiveContainer,\r\n//     Cell,\r\n// } from \"recharts\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { getToken } from \"../../utils/helpers\";\r\nimport axios from \"axios\";\r\nimport Loader from '../Layout/Loader';\r\n\r\nconst UserSalesChart = ({ data }) => {\r\n    const [sales, setSales] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const userSales = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/customer-sales`, config)\r\n            setSales(data.customerSales)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    }\r\n    const barColors = [\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\"]\r\n    useEffect(() => {\r\n        userSales()\r\n        // allUsers()\r\n    }, [])\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n    {loading ? <Loader /> : (\r\n        <LineChart data={sales} >\r\n            <CartesianGrid strokeDasharray=\"2 2\" />\r\n            <XAxis dataKey=\"userDetails.name\" />\r\n            <YAxis tick={{ fill: '#ffffff' }} />\r\n            <Tooltip contentStyle={{ color: '#ffffff' }} />\r\n            <Legend />\r\n\r\n            <Line type=\"monotone\" dataKey=\"total\" stroke=\"#ffffff\" strokeWidth={5} />\r\n        </LineChart>\r\n    )}\r\n</ResponsiveContainer>\r\n\r\n\r\n    );\r\n}\r\nexport default UserSalesChart","C:\\trynaproject\\frontend\\src\\Components\\Admin\\SideBar.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\MonthlySalesChart.js",["386"],[],"import React, { useState, useEffect } from 'react'\r\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { getToken } from \"../../utils/helpers\";\r\nimport axios from \"axios\";\r\nimport Loader from '../Layout/Loader';\r\n// import { BarChart } from 'recharts';\r\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\nexport default function MonthlySalesChart() {\r\n    const [sales, setSales] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    \r\n    const monthlySales = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/sales-per-month`, config)\r\n            setSales(data.salesPerMonth)\r\n            setLoading(false)\r\n\r\n        } catch (error) {\r\n           setError(error.response.data.message)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        monthlySales()\r\n       \r\n    }, [])\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n            {loading ? <Loader /> : (\r\n                <BarChart width={600} height={300} data={sales} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n                    <Bar dataKey=\"total\" fill=\"#7CB5EC\" />\r\n                    <CartesianGrid stroke=\"#4a5492\" strokeDasharray=\"5 5\" />\r\n                    <XAxis dataKey=\"month\" tick={{ fill: '#ffffff' }} />\r\n                    <YAxis tick={{ fill: '#ffffff' }} />\r\n                    <Tooltip contentStyle={{ color: '#ffffff' }} />\r\n                </BarChart>\r\n            )}\r\n        </ResponsiveContainer>\r\n    );\r\n}","C:\\trynaproject\\frontend\\src\\Components\\Admin\\ProductSalesChart.js",["387","388","389","390"],[],"import React, { useState, useEffect } from 'react'\r\nimport { getToken } from \"../../utils/helpers\";\r\nimport axios from \"axios\";\r\nimport Loader from '../Layout/Loader';\r\n\r\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell } from 'recharts';\r\n\r\nexport default function ProductSalesChart({ data }) {\r\n    const [sales, setSales] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState('')\r\n    const pieColors = [\r\n        \"#FF6633\",\r\n        \"#FFB399\",\r\n        \"#FF33FF\",\r\n        \"#FFFF99\",\r\n        \"#00B3E6\",\r\n        \"#E6B333\",\r\n        \"#3366E6\",\r\n        \"#999966\",\r\n        \"#809980\",\r\n        \"#E6FF80\",\r\n        \"#1AFF33\",\r\n        \"#999933\",\r\n        \"#FF3380\",\r\n        \"#CCCC00\",\r\n        \"#66E64D\",\r\n        \"#4D80CC\",\r\n        \"#FF4D4D\",\r\n        \"#99E6E6\",\r\n        \"#6666FF\"\r\n    ]\r\n    // console.log(data)\r\n\r\n    const RADIAN = Math.PI / 180;\r\n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${percent}%`}\r\n            </text>\r\n        );\r\n    };\r\n    const productSales = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Authorization': `Bearer ${getToken()}`\r\n                }\r\n            }\r\n\r\n            const { data } = await axios.get(`http://localhost:4001/api/v1/admin/product-sales`, config)\r\n            setSales(data.totalPercentage)\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n            \r\n        }\r\n    }\r\n    useEffect(() => {\r\n        productSales()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"95%\" height={300}>\r\n            <PieChart width={50} height={50}>\r\n                {/* <Pie data={data} dataKey=\"percent\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={50} fill=\"#8884d8\" /> */}\r\n                <Pie\r\n                    dataKey=\"percent\"\r\n                    nameKey=\"name\"\r\n                    isAnimationActive={true}\r\n                    data={sales}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    outerRadius={150}\r\n                    fill=\"#8884d8\"\r\n                    label={renderCustomizedLabel}\r\n                    labelLine={false}\r\n                // label\r\n                >  {\r\n                        sales.map((entry, index) => <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />)\r\n                    }\r\n                </Pie>\r\n                <Tooltip />\r\n                <Legend layout=\"vertical\" verticalAlign=\"top\" align=\"left\" />\r\n            </PieChart>\r\n        </ResponsiveContainer>\r\n\r\n\r\n    );\r\n}","C:\\trynaproject\\frontend\\src\\Components\\Review\\ListReviews.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\UserCharts.js",["391","392","393"],[],"import React, { useState, useEffect } from 'react';\r\nimport { ScatterChart, Scatter, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\nimport { getToken } from '../../utils/helpers';\r\nimport Loader from '../Layout/Loader';\r\n\r\nconst UserCharts = () => {\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  const listUsers = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`http://localhost:4001/api/v1/admin/users`, config);\r\n      setAllUsers(data.users);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'An error occurred');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    listUsers();\r\n  }, []);\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={400}>\r\n      <ScatterChart data={allUsers}>\r\n        <CartesianGrid strokeDasharray=\"2 2\" />\r\n        <XAxis dataKey=\"createdAt\" />\r\n        <YAxis dataKey=\"name\" type=\"category\" />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Scatter type=\"linear\" dataKey=\"createdAt\" fill=\"#8884d8\" line={{ stroke: '#8884d8', strokeWidth: 2 }} />\r\n      </ScatterChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default UserCharts;","C:\\trynaproject\\frontend\\src\\Components\\Layout\\Toast.js",[],[],"C:\\trynaproject\\frontend\\src\\Components\\Admin\\NewUser.js",["394","395","396","397"],[],{"ruleId":"398","replacedBy":"399"},{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","replacedBy":"403"},{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","replacedBy":"409"},{"ruleId":"410","severity":1,"message":"411","line":15,"column":17,"nodeType":"412","messageId":"413","endLine":15,"endColumn":31},{"ruleId":"410","severity":1,"message":"414","line":13,"column":8,"nodeType":"412","messageId":"413","endLine":13,"endColumn":14},{"ruleId":"410","severity":1,"message":"415","line":34,"column":12,"nodeType":"412","messageId":"413","endLine":34,"endColumn":17},{"ruleId":"410","severity":1,"message":"416","line":34,"column":19,"nodeType":"412","messageId":"413","endLine":34,"endColumn":27},{"ruleId":"410","severity":1,"message":"417","line":71,"column":11,"nodeType":"412","messageId":"413","endLine":71,"endColumn":19},{"ruleId":"410","severity":1,"message":"418","line":74,"column":21,"nodeType":"412","messageId":"413","endLine":74,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":22,"column":37,"nodeType":"421","endLine":22,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":23,"column":37,"nodeType":"421","endLine":23,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":24,"column":37,"nodeType":"421","endLine":24,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":32,"column":37,"nodeType":"421","endLine":32,"endColumn":65},{"ruleId":"419","severity":1,"message":"420","line":33,"column":37,"nodeType":"421","endLine":33,"endColumn":65},{"ruleId":"419","severity":1,"message":"420","line":34,"column":37,"nodeType":"421","endLine":34,"endColumn":65},{"ruleId":"419","severity":1,"message":"422","line":45,"column":29,"nodeType":"421","endLine":45,"endColumn":65},{"ruleId":"419","severity":1,"message":"420","line":46,"column":29,"nodeType":"421","endLine":46,"endColumn":74},{"ruleId":"419","severity":1,"message":"420","line":47,"column":29,"nodeType":"421","endLine":47,"endColumn":74},{"ruleId":"419","severity":1,"message":"420","line":48,"column":29,"nodeType":"421","endLine":48,"endColumn":74},{"ruleId":"419","severity":1,"message":"422","line":83,"column":116,"nodeType":"421","endLine":83,"endColumn":146},{"ruleId":"410","severity":1,"message":"423","line":5,"column":10,"nodeType":"412","messageId":"413","endLine":5,"endColumn":17},{"ruleId":"424","severity":1,"message":"425","line":53,"column":5,"nodeType":"421","endLine":57,"endColumn":7},{"ruleId":"410","severity":1,"message":"426","line":20,"column":12,"nodeType":"412","messageId":"413","endLine":20,"endColumn":19},{"ruleId":"427","severity":1,"message":"428","line":33,"column":8,"nodeType":"429","endLine":33,"endColumn":42,"suggestions":"430"},{"ruleId":"406","severity":1,"message":"431","line":33,"column":9,"nodeType":"432","messageId":"433","endLine":33,"endColumn":31,"fix":"434"},{"ruleId":"424","severity":1,"message":"425","line":98,"column":21,"nodeType":"421","endLine":103,"endColumn":23},{"ruleId":"410","severity":1,"message":"415","line":14,"column":12,"nodeType":"412","messageId":"413","endLine":14,"endColumn":17},{"ruleId":"410","severity":1,"message":"416","line":14,"column":19,"nodeType":"412","messageId":"413","endLine":14,"endColumn":27},{"ruleId":"410","severity":1,"message":"435","line":15,"column":18,"nodeType":"412","messageId":"413","endLine":15,"endColumn":25},{"ruleId":"410","severity":1,"message":"436","line":17,"column":12,"nodeType":"412","messageId":"413","endLine":17,"endColumn":21},{"ruleId":"410","severity":1,"message":"437","line":14,"column":21,"nodeType":"412","messageId":"413","endLine":14,"endColumn":31},{"ruleId":"410","severity":1,"message":"438","line":21,"column":11,"nodeType":"412","messageId":"413","endLine":21,"endColumn":17},{"ruleId":"427","severity":1,"message":"439","line":90,"column":8,"nodeType":"429","endLine":90,"endColumn":10,"suggestions":"440"},{"ruleId":"424","severity":1,"message":"425","line":102,"column":29,"nodeType":"421","endLine":107,"endColumn":31},{"ruleId":"410","severity":1,"message":"435","line":20,"column":18,"nodeType":"412","messageId":"413","endLine":20,"endColumn":25},{"ruleId":"410","severity":1,"message":"436","line":14,"column":12,"nodeType":"412","messageId":"413","endLine":14,"endColumn":21},{"ruleId":"427","severity":1,"message":"441","line":44,"column":8,"nodeType":"429","endLine":44,"endColumn":25,"suggestions":"442"},{"ruleId":"410","severity":1,"message":"435","line":7,"column":18,"nodeType":"412","messageId":"413","endLine":7,"endColumn":25},{"ruleId":"410","severity":1,"message":"443","line":1,"column":27,"nodeType":"412","messageId":"413","endLine":1,"endColumn":36},{"ruleId":"410","severity":1,"message":"426","line":12,"column":12,"nodeType":"412","messageId":"413","endLine":12,"endColumn":19},{"ruleId":"410","severity":1,"message":"418","line":35,"column":21,"nodeType":"412","messageId":"413","endLine":35,"endColumn":25},{"ruleId":"410","severity":1,"message":"444","line":4,"column":10,"nodeType":"412","messageId":"413","endLine":4,"endColumn":19},{"ruleId":"410","severity":1,"message":"445","line":1,"column":38,"nodeType":"412","messageId":"413","endLine":1,"endColumn":44},{"ruleId":"410","severity":1,"message":"446","line":9,"column":10,"nodeType":"412","messageId":"413","endLine":9,"endColumn":15},{"ruleId":"410","severity":1,"message":"415","line":21,"column":12,"nodeType":"412","messageId":"413","endLine":21,"endColumn":17},{"ruleId":"410","severity":1,"message":"447","line":25,"column":12,"nodeType":"412","messageId":"413","endLine":25,"endColumn":23},{"ruleId":"410","severity":1,"message":"448","line":25,"column":25,"nodeType":"412","messageId":"413","endLine":25,"endColumn":39},{"ruleId":"424","severity":1,"message":"425","line":140,"column":37,"nodeType":"421","endLine":144,"endColumn":39},{"ruleId":"424","severity":1,"message":"425","line":168,"column":37,"nodeType":"421","endLine":172,"endColumn":39},{"ruleId":"424","severity":1,"message":"425","line":198,"column":37,"nodeType":"421","endLine":202,"endColumn":39},{"ruleId":"424","severity":1,"message":"425","line":227,"column":41,"nodeType":"421","endLine":231,"endColumn":43},{"ruleId":"410","severity":1,"message":"449","line":9,"column":8,"nodeType":"412","messageId":"413","endLine":9,"endColumn":20},{"ruleId":"410","severity":1,"message":"426","line":23,"column":10,"nodeType":"412","messageId":"413","endLine":23,"endColumn":17},{"ruleId":"427","severity":1,"message":"441","line":77,"column":8,"nodeType":"429","endLine":77,"endColumn":35,"suggestions":"450"},{"ruleId":"427","severity":1,"message":"441","line":107,"column":8,"nodeType":"429","endLine":107,"endColumn":52,"suggestions":"451"},{"ruleId":"427","severity":1,"message":"441","line":95,"column":8,"nodeType":"429","endLine":95,"endColumn":39,"suggestions":"452"},{"ruleId":"410","severity":1,"message":"446","line":4,"column":10,"nodeType":"412","messageId":"413","endLine":4,"endColumn":15},{"ruleId":"410","severity":1,"message":"453","line":13,"column":8,"nodeType":"412","messageId":"413","endLine":13,"endColumn":13},{"ruleId":"427","severity":1,"message":"454","line":63,"column":8,"nodeType":"429","endLine":63,"endColumn":27,"suggestions":"455"},{"ruleId":"410","severity":1,"message":"446","line":5,"column":10,"nodeType":"412","messageId":"413","endLine":5,"endColumn":15},{"ruleId":"410","severity":1,"message":"426","line":15,"column":12,"nodeType":"412","messageId":"413","endLine":15,"endColumn":19},{"ruleId":"427","severity":1,"message":"456","line":69,"column":8,"nodeType":"429","endLine":69,"endColumn":36,"suggestions":"457"},{"ruleId":"410","severity":1,"message":"458","line":16,"column":23,"nodeType":"412","messageId":"413","endLine":16,"endColumn":37},{"ruleId":"410","severity":1,"message":"426","line":19,"column":10,"nodeType":"412","messageId":"413","endLine":19,"endColumn":17},{"ruleId":"427","severity":1,"message":"459","line":87,"column":6,"nodeType":"429","endLine":87,"endColumn":17,"suggestions":"460"},{"ruleId":"410","severity":1,"message":"446","line":4,"column":10,"nodeType":"412","messageId":"413","endLine":4,"endColumn":15},{"ruleId":"410","severity":1,"message":"453","line":11,"column":8,"nodeType":"412","messageId":"413","endLine":11,"endColumn":13},{"ruleId":"410","severity":1,"message":"461","line":16,"column":25,"nodeType":"412","messageId":"413","endLine":16,"endColumn":39},{"ruleId":"427","severity":1,"message":"441","line":68,"column":8,"nodeType":"429","endLine":68,"endColumn":40,"suggestions":"462"},{"ruleId":"410","severity":1,"message":"426","line":17,"column":10,"nodeType":"412","messageId":"413","endLine":17,"endColumn":17},{"ruleId":"410","severity":1,"message":"463","line":19,"column":10,"nodeType":"412","messageId":"413","endLine":19,"endColumn":18},{"ruleId":"427","severity":1,"message":"441","line":113,"column":6,"nodeType":"429","endLine":113,"endColumn":22,"suggestions":"464"},{"ruleId":"427","severity":1,"message":"441","line":66,"column":8,"nodeType":"429","endLine":66,"endColumn":26,"suggestions":"465"},{"ruleId":"410","severity":1,"message":"426","line":19,"column":10,"nodeType":"412","messageId":"413","endLine":19,"endColumn":17},{"ruleId":"427","severity":1,"message":"441","line":105,"column":6,"nodeType":"429","endLine":105,"endColumn":48,"suggestions":"466"},{"ruleId":"410","severity":1,"message":"426","line":17,"column":10,"nodeType":"412","messageId":"413","endLine":17,"endColumn":17},{"ruleId":"410","severity":1,"message":"467","line":19,"column":10,"nodeType":"412","messageId":"413","endLine":19,"endColumn":15},{"ruleId":"427","severity":1,"message":"441","line":113,"column":6,"nodeType":"429","endLine":113,"endColumn":22,"suggestions":"468"},{"ruleId":"410","severity":1,"message":"446","line":4,"column":10,"nodeType":"412","messageId":"413","endLine":4,"endColumn":15},{"ruleId":"410","severity":1,"message":"453","line":11,"column":8,"nodeType":"412","messageId":"413","endLine":11,"endColumn":13},{"ruleId":"410","severity":1,"message":"461","line":16,"column":25,"nodeType":"412","messageId":"413","endLine":16,"endColumn":39},{"ruleId":"427","severity":1,"message":"441","line":71,"column":8,"nodeType":"429","endLine":71,"endColumn":40,"suggestions":"469"},{"ruleId":"410","severity":1,"message":"470","line":5,"column":8,"nodeType":"412","messageId":"413","endLine":5,"endColumn":14},{"ruleId":"410","severity":1,"message":"471","line":20,"column":12,"nodeType":"412","messageId":"413","endLine":20,"endColumn":16},{"ruleId":"410","severity":1,"message":"435","line":20,"column":18,"nodeType":"412","messageId":"413","endLine":20,"endColumn":25},{"ruleId":"427","severity":1,"message":"472","line":82,"column":8,"nodeType":"429","endLine":82,"endColumn":50,"suggestions":"473"},{"ruleId":"410","severity":1,"message":"437","line":8,"column":21,"nodeType":"412","messageId":"413","endLine":8,"endColumn":31},{"ruleId":"410","severity":1,"message":"415","line":9,"column":12,"nodeType":"412","messageId":"413","endLine":9,"endColumn":17},{"ruleId":"410","severity":1,"message":"416","line":9,"column":19,"nodeType":"412","messageId":"413","endLine":9,"endColumn":27},{"ruleId":"410","severity":1,"message":"435","line":10,"column":18,"nodeType":"412","messageId":"413","endLine":10,"endColumn":25},{"ruleId":"410","severity":1,"message":"474","line":11,"column":12,"nodeType":"412","messageId":"413","endLine":11,"endColumn":27},{"ruleId":"410","severity":1,"message":"475","line":11,"column":29,"nodeType":"412","messageId":"413","endLine":11,"endColumn":47},{"ruleId":"476","severity":1,"message":"477","line":8,"column":9,"nodeType":"421","endLine":13,"endColumn":11},{"ruleId":"419","severity":1,"message":"420","line":16,"column":13,"nodeType":"421","endLine":16,"endColumn":24},{"ruleId":"410","severity":1,"message":"415","line":21,"column":12,"nodeType":"412","messageId":"413","endLine":21,"endColumn":17},{"ruleId":"410","severity":1,"message":"478","line":38,"column":11,"nodeType":"412","messageId":"413","endLine":38,"endColumn":20},{"ruleId":"410","severity":1,"message":"415","line":12,"column":12,"nodeType":"412","messageId":"413","endLine":12,"endColumn":17},{"ruleId":"410","severity":1,"message":"470","line":4,"column":8,"nodeType":"412","messageId":"413","endLine":4,"endColumn":14},{"ruleId":"410","severity":1,"message":"426","line":10,"column":12,"nodeType":"412","messageId":"413","endLine":10,"endColumn":19},{"ruleId":"410","severity":1,"message":"437","line":10,"column":21,"nodeType":"412","messageId":"413","endLine":10,"endColumn":31},{"ruleId":"410","severity":1,"message":"415","line":11,"column":12,"nodeType":"412","messageId":"413","endLine":11,"endColumn":17},{"ruleId":"410","severity":1,"message":"470","line":5,"column":8,"nodeType":"412","messageId":"413","endLine":5,"endColumn":14},{"ruleId":"410","severity":1,"message":"426","line":9,"column":10,"nodeType":"412","messageId":"413","endLine":9,"endColumn":17},{"ruleId":"410","severity":1,"message":"415","line":10,"column":10,"nodeType":"412","messageId":"413","endLine":10,"endColumn":15},{"ruleId":"410","severity":1,"message":"426","line":22,"column":12,"nodeType":"412","messageId":"413","endLine":22,"endColumn":19},{"ruleId":"427","severity":1,"message":"428","line":35,"column":8,"nodeType":"429","endLine":35,"endColumn":42,"suggestions":"479"},{"ruleId":"406","severity":1,"message":"431","line":35,"column":9,"nodeType":"432","messageId":"433","endLine":35,"endColumn":31,"fix":"480"},{"ruleId":"410","severity":1,"message":"481","line":92,"column":11,"nodeType":"412","messageId":"413","endLine":92,"endColumn":25},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["482"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'loadUser' is assigned a value but never used.","'data' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'getUser' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'error' and 'isAuthenticated'. Either include them or remove the dependency array.","ArrayExpression",["483"],"Unexpected whitespace before property isAuthenticated.","MemberExpression","unexpectedWhitespace",{"range":"484","text":"485"},"'setUser' is assigned a value but never used.","'isUpdated' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'notify' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'redirect'. Either include them or remove the dependency array.",["486"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["487"],"'useEffect' is defined but never used.","'useParams' is defined but never used.","'useRef' is defined but never used.","'toast' is defined but never used.","'totalAmount' is assigned a value but never used.","'setTotalAmount' is assigned a value but never used.","'CategoryList' is defined but never used.",["488"],["489"],["490"],"'Toast' is defined but never used.","React Hook useEffect has missing dependencies: 'listUsers' and 'navigate'. Either include them or remove the dependency array.",["491"],"React Hook useEffect has missing dependencies: 'getUserDetails' and 'navigate'. Either include them or remove the dependency array.",["492"],"'setImagesError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'category', 'error', 'id', 'navigate', and 'updateError'. Either include them or remove the dependency array.",["493"],"'setDeleteError' is assigned a value but never used.",["494"],"'category' is assigned a value but never used.",["495"],["496"],["497"],"'brand' is assigned a value but never used.",["498"],["499"],"'Loader' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProductReviews'. Either include it or remove the dependency array.",["500"],"'isAuthenticated' is assigned a value but never used.","'setIsAuthenticated' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'barColors' is assigned a value but never used.",["501"],{"range":"502","text":"485"},"'handlerOnClick' is assigned a value but never used.","no-object-constructor",{"desc":"503","fix":"504"},[899,901],".",{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"513","fix":"521"},{"desc":"507","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"507","fix":"527"},{"desc":"513","fix":"528"},{"desc":"529","fix":"530"},{"desc":"503","fix":"531"},[935,937],"Update the dependencies array to be: [error, error.isAuthenticated, isAuthenticated, navigate]",{"range":"532","text":"533"},"Update the dependencies array to be: [navigate, redirect]",{"range":"534","text":"535"},"Update the dependencies array to be: [error, navigate, success]",{"range":"536","text":"537"},"Update the dependencies array to be: [error, isUpdated, navigate, orderId]",{"range":"538","text":"539"},"Update the dependencies array to be: [error, isUpdated, updateError, product, id, navigate]",{"range":"540","text":"541"},"Update the dependencies array to be: [error, deleteError, isDeleted, navigate]",{"range":"542","text":"543"},"Update the dependencies array to be: [error, isDeleted, listUsers, navigate]",{"range":"544","text":"545"},"Update the dependencies array to be: [error, isUpdated, id, user, getUserDetails, navigate]",{"range":"546","text":"547"},"Update the dependencies array to be: [category, error, id, isUpdated, navigate, updateError]",{"range":"548","text":"549"},{"range":"550","text":"543"},{"range":"551","text":"537"},"Update the dependencies array to be: [error, isDeleted, navigate]",{"range":"552","text":"553"},"Update the dependencies array to be: [error, isUpdated, updateError, brand, id, navigate]",{"range":"554","text":"555"},{"range":"556","text":"537"},{"range":"557","text":"543"},"Update the dependencies array to be: [error, productId, isDeleted, deleteError, getProductReviews]",{"range":"558","text":"559"},{"range":"560","text":"533"},[893,927],"[error, error.isAuthenticated, isAuthenticated, navigate]",[2952,2954],"[navigate, redirect]",[1407,1424],"[error, navigate, success]",[2512,2539],"[error, isUpdated, navigate, orderId]",[3378,3422],"[error, isUpdated, updateError, product, id, navigate]",[2849,2880],"[error, deleteError, isDeleted, navigate]",[1886,1905],"[error, isDeleted, listUsers, navigate]",[2224,2252],"[error, isUpdated, id, user, getUserDetails, navigate]",[2630,2641],"[category, error, id, isUpdated, navigate, updateError]",[2124,2156],[2934,2950],[2287,2305],"[error, isDeleted, navigate]",[2882,2924],"[error, isUpdated, updateError, brand, id, navigate]",[2904,2920],[2185,2217],[2433,2475],"[error, productId, isDeleted, deleteError, getProductReviews]",[929,963]]